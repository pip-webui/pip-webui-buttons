{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/dependencies/TranslateFilter.ts","src/fabs/FabTooltipVisibility.ts","src/index.ts","src/refresh_button/RefreshButton.ts","src/toggle_buttons/ToggleButtons.ts","temp/pip-webui-buttons-html.min.js"],"names":[],"mappings":"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","file":"pip-webui-buttons.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","{\r\n    function translate($injector: ng.auto.IInjectorService) {\r\n        const pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\r\n\r\n        return function (key: string) {\r\n            return pipTranslate ? pipTranslate['translate'](key) || key : key;\r\n        }\r\n    }\r\n\r\n    angular.module('pipButtons.Translate', [])\r\n        .filter('translate', translate);\r\n}","{\r\n\r\nclass FabTooltipVisibilityController {\r\n    private _element;\r\n    private _scope: angular.IScope;\r\n    private _timeout: ng.ITimeoutService;\r\n\r\n    constructor(\r\n        $element: any,\r\n        $attrs: angular.IAttributes,\r\n        $scope: angular.IScope,\r\n        $timeout: ng.ITimeoutService,\r\n        $parse\r\n    ) {\r\n        \"ngInject\";\r\n        let trigGetter = $parse($attrs['pipFabTooltipVisibility']),\r\n            showGetter = $parse($attrs['pipFabShowTooltip']),\r\n            showSetter = showGetter.assign;\r\n\r\n        $scope.$watch(trigGetter, (isOpen) => {\r\n            if (!_.isFunction(showSetter)) return;\r\n\r\n            if (isOpen) {\r\n                $timeout(() => {\r\n                    showSetter($scope, isOpen);\r\n                }, 600);\r\n            } else {\r\n                showSetter($scope, isOpen);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction pipFabTooltipVisibility($parse, $timeout): ng.IDirective {\r\n    return {\r\n        restrict: 'A',\r\n        scope: false,\r\n        controller: FabTooltipVisibilityController\r\n    };\r\n}\r\n\r\nangular\r\n    .module('pipFabTooltipVisibility', [])\r\n    .directive('pipFabTooltipVisibility', pipFabTooltipVisibility);\r\n\r\n}","ï»¿import './refresh_button/RefreshButton';\r\nimport './toggle_buttons/ToggleButtons'\r\nimport './fabs/FabTooltipVisibility';\r\n\r\nangular.module('pipButtons', [\r\n    'pipToggleButtons',\r\n    'pipRefreshButton',\r\n    'pipFabTooltipVisibility'\r\n]);","{\r\n\r\ninterface IRefreshButtonBindings {\r\n    [key: string]: any;\r\n\r\n    text: any;\r\n    visible: any;\r\n    onRefresh: any\r\n}\r\n\r\nconst RefreshButtonBindings: IRefreshButtonBindings = {\r\n    text: '<pipText',\r\n    visible: '<pipVisible',\r\n    onRefresh: '&?pipRefresh'\r\n}\r\n\r\nclass RefreshButtonChanges implements ng.IOnChangesObject, IRefreshButtonBindings {\r\n    [key: string]: ng.IChangesObject < any > ;\r\n    // Not one way bindings\r\n    onRefresh: ng.IChangesObject < ({\r\n        $event: any\r\n    }) => ng.IPromise < any >> ;\r\n    // One way bindings\r\n    text: ng.IChangesObject < string > ;\r\n    visible: ng.IChangesObject < boolean > ;\r\n}\r\n\r\nclass RefreshButtonController implements IRefreshButtonBindings {\r\n\r\n    private _textElement: any;\r\n    private _buttonElement: any;\r\n    private _width: number;\r\n\r\n    public text: string;\r\n    public visible: boolean;\r\n    public onRefresh: (param: {\r\n        $event: ng.IAngularEvent\r\n    }) => ng.IPromise < any > ;\r\n\r\n    constructor(\r\n        private $scope: ng.IScope,\r\n        private $element: any,\r\n        private $attrs: ng.IAttributes\r\n    ) {}\r\n\r\n    public $postLink() {\r\n        this._buttonElement = this.$element.children('.md-button');\r\n        this._textElement = this._buttonElement.children('.pip-refresh-text');\r\n\r\n        this.show();\r\n    }\r\n\r\n    public $onChanges(changes: RefreshButtonChanges) {\r\n        if (changes.visible.currentValue === true) {\r\n            this.text = changes.text.currentValue;\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    public onClick($event) {\r\n        if (this.onRefresh) {\r\n            this.onRefresh({\r\n                $event: $event\r\n            });\r\n        }\r\n    }\r\n\r\n    private show() {\r\n        if (this._textElement === undefined || this._buttonElement === undefined) {\r\n            return;\r\n        }\r\n        // Set new text\r\n        this._textElement.text(this.text);\r\n        // Show button\r\n        this._buttonElement.show();\r\n        // Adjust position\r\n        const width = this._buttonElement.width();\r\n        this._buttonElement.css('margin-left', '-' + width / 2 + 'px');\r\n    }\r\n\r\n    private hide() {\r\n        this._buttonElement.hide();\r\n    }\r\n}\r\n\r\n\r\nconst RefreshButtonComponent: ng.IComponentOptions = {\r\n    bindings: RefreshButtonBindings,\r\n    controller: RefreshButtonController,\r\n    template: '<md-button class=\"pip-refresh-button\" tabindex=\"-1\" ng-click=\"$ctrl.onClick($event)\" aria-label=\"REFRESH\">' +\r\n        '<md-icon md-svg-icon=\"icons:refresh\"></md-icon>' +\r\n        '<span class=\"pip-refresh-text\"></span>' +\r\n        '</md-button>'\r\n};\r\n\r\nangular\r\n    .module('pipRefreshButton', ['ngMaterial'])\r\n    .component('pipRefreshButton', RefreshButtonComponent);\r\n\r\n}","{\r\n\r\nclass ToggleButton {\r\n    id: any;\r\n    name: string;\r\n    disabled: boolean;\r\n    level: number;\r\n    diselectable: boolean;\r\n    filled: boolean;\r\n}\r\n\r\ninterface IToggleButtonsBindings {\r\n    [key: string]: any;\r\n\r\n    ngDisabled: any;\r\n    buttons: any;\r\n    currentButtonValue: any;\r\n    currentButton: any;\r\n    multiselect: any;\r\n    change: any;\r\n    onlyToggle: any\r\n}\r\n\r\nconst ToggleButtonsBindings: IToggleButtonsBindings = {\r\n    ngDisabled: '<?',\r\n    buttons: '<pipButtons',\r\n    currentButtonValue: '=ngModel',\r\n    currentButton: '=?pipButtonObject',\r\n    multiselect: '<?pipMultiselect',\r\n    change: '&ngChange',\r\n    onlyToggle: '<?pipOnlyToggle'\r\n}\r\n\r\nclass ToggleButtonsChanges implements ng.IOnChangesObject, IToggleButtonsBindings {\r\n    [key: string]: ng.IChangesObject < any > ;\r\n    // Not one way bindings\r\n    currentButtonValue: any;\r\n    currentButton: any;\r\n    change: ng.IChangesObject < () => ng.IPromise < void >> ;\r\n    // One way bindings\r\n    ngDisabled: ng.IChangesObject < boolean > ;\r\n    buttons: ng.IChangesObject < ToggleButton[] > ;\r\n    multiselect: ng.IChangesObject < boolean > ;\r\n    onlyToggle: ng.IChangesObject < boolean > ;\r\n}\r\n\r\nclass ToggleButtonsController implements IToggleButtonsBindings {\r\n    lenght: number;\r\n\r\n    public ngDisabled: boolean;\r\n    public class: string;\r\n    public multiselect: boolean;\r\n    public buttons: ToggleButton[];\r\n    public disabled: boolean;\r\n    public currentButtonValue: any;\r\n    public currentButtonIndex: number;\r\n    public currentButton: any;\r\n    public change: () => ng.IPromise < any > ;\r\n    public onlyToggle: boolean;\r\n    public pipMedia: any;\r\n\r\n    constructor(\r\n        private $element: any,\r\n        private $attrs: angular.IAttributes,\r\n        private $scope: angular.IScope,\r\n        private $timeout: ng.ITimeoutService,\r\n        $injector: ng.auto.IInjectorService\r\n    ) {\r\n        \"ngInject\";\r\n\r\n        this.pipMedia = $injector.has('pipMedia') ? $injector.get('pipMedia') : null;\r\n        this.class = $attrs['class'] || '';\r\n        const index = _.indexOf(this.buttons, _.find(this.buttons, {\r\n            id: this.currentButtonValue\r\n        }));\r\n        this.currentButtonIndex = index < 0 ? 0 : index;\r\n        this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\r\n    }\r\n\r\n    public $onChanges(changes: ToggleButtonsChanges) {\r\n        this.multiselect = changes.multiselect ? changes.multiselect.currentValue : false;\r\n        this.disabled = changes.ngDisabled ? changes.ngDisabled.currentValue : false;\r\n        this.onlyToggle = changes.onlyToggle ? changes.onlyToggle.currentValue : false;\r\n\r\n        this.buttons = !changes.buttons || _.isArray(changes.buttons.currentValue) && changes.buttons.currentValue.length === 0 ? [] : changes.buttons.currentValue;\r\n\r\n        const index = _.indexOf(this.buttons, _.find(this.buttons, {\r\n            id: this.currentButtonValue\r\n        }));\r\n        this.currentButtonIndex = index < 0 ? 0 : index;\r\n        this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\r\n    }\r\n\r\n    public $postLink() {\r\n        this.$element\r\n            .on('focusin', () => {\r\n                this.$element.addClass('focused-container');\r\n            })\r\n            .on('focusout', () => {\r\n                this.$element.removeClass('focused-container');\r\n            });\r\n    }\r\n\r\n    public buttonSelected(index) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.currentButtonIndex = index;\r\n        this.currentButton = this.buttons[this.currentButtonIndex];\r\n        this.currentButtonValue = this.currentButton.id || index;\r\n\r\n        this.$timeout(() => {\r\n            if (this.change) {\r\n                this.change();\r\n            }\r\n        });\r\n    }\r\n\r\n    public enterSpacePress(event) {\r\n        this.buttonSelected(event.index);\r\n    }\r\n\r\n    public highlightButton(index) {\r\n        if (this.multiselect &&\r\n            !_.isUndefined(this.currentButton.level) &&\r\n            !_.isUndefined(this.buttons[index].level)) {\r\n\r\n            return this.currentButton.level >= this.buttons[index].level;\r\n        }\r\n\r\n        return this.currentButtonIndex == index;\r\n    }\r\n}\r\n\r\nconst ToggleButtons: ng.IComponentOptions = {\r\n    bindings: ToggleButtonsBindings,\r\n    templateUrl: 'toggle_buttons/ToggleButtons.html',\r\n    controller: ToggleButtonsController\r\n}\r\n\r\nangular\r\n    .module('pipToggleButtons', ['pipButtons.Templates'])\r\n    .component('pipToggleButtons', ToggleButtons);\r\n\r\n}","(function(module) {\ntry {\n  module = angular.module('pipButtons.Templates');\n} catch (e) {\n  module = angular.module('pipButtons.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('toggle_buttons/ToggleButtons.html',\n    '<div class=\"pip-toggle-buttons layout-row {{$ctrl.class}}\" pip-selected=\"$ctrl.bufButtonIndex\" pip-enter-space-press=\"$ctrl.enterSpacePress($event)\" ng-if=\"!$ctrl.pipMedia(\\'xs\\') || $ctrl.onlyToggle\"><md-button tabindex=\"-1\" ng-repeat=\"button in $ctrl.buttons\" ng-class=\"{\\'md-accent md-raised selected color-accent-bg\\' : $ctrl.highlightButton($index)}\" ng-attr-style=\"{{ \\'background-color:\\' + ($ctrl.highlightButton($index) ? button.backgroundColor : \\'\\') + \\'!important\\' }}\" class=\"pip-selectable pip-chip-button flex\" ng-click=\"$ctrl.buttonSelected($index, $event)\" ng-disabled=\"button.disabled || $ctrl.disabled\">{{button.name || button.title | translate}} <span ng-if=\"button.checked || button.complete || button.filled\" class=\"pip-tagged\">*</span></md-button></div><md-input-container class=\"md-block\" ng-if=\"$ctrl.pipMedia(\\'xs\\') && !$ctrl.onlyToggle\"><md-select ng-model=\"$ctrl.currentButtonIndex\" ng-disabled=\"$ctrl.disabled\" aria-label=\"DROPDOWN\" md-on-close=\"$ctrl.buttonSelected($ctrl.currentButtonIndex)\"><md-option ng-repeat=\"action in $ctrl.buttons\" value=\"{{ ::$index }}\">{{ (action.title || action.name) | translate }} <span ng-if=\"action.checked || action.complete || action.filled\" class=\"pip-tagged\">*</span></md-option></md-select></md-input-container>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-buttons-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}