{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/dependencies/TranslateFilter.ts","src/fabs/FabTooltipVisibility.ts","src/index.ts","src/refresh_button/RefreshButton.ts","src/toggle_buttons/ToggleButtons.ts","temp/pip-webui-buttons-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","buttons","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","translate","$injector","pipTranslate","has","get","key","$inject","filter","2","pipFabTooltipVisibility","$parse","$timeout","restrict","scope","controller","FabTooltipVisibilityController_1","$element","$attrs","$scope","showGetter","showSetter","assign","$watch","trigGetter","isOpen","_","isFunction","angular","3","Object","defineProperty","value","./refresh_button/RefreshButton","./toggle_buttons/ToggleButtons","4","RefreshButtonBindings","text","visible","onRefresh","RefreshButtonChanges","RefreshButtonController","prototype","$postLink","_buttonElement","children","_textElement","show","$onChanges","changes","currentValue","hide","onClick","$event","undefined","width","css","RefreshButtonComponent","component","ToggleButtonsBindings","ToggleButton","ngDisabled","currentButtonValue","currentButton","multiselect","change","onlyToggle","ToggleButtonsChanges","ToggleButtonsController","pipMedia","class","index","indexOf","find","id","currentButtonIndex","disabled","isArray","_this","on","addClass","removeClass","buttonSelected","enterSpacePress","event","highlightButton","isUndefined","level","ToggleButtons","bindings","6","run","$templateCache","put"],"mappings":"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","file":"pip-webui-buttons.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","{\r\n    function translate($injector: ng.auto.IInjectorService) {\r\n        const pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\r\n\r\n        return function (key: string) {\r\n            return pipTranslate ? pipTranslate['translate'](key) || key : key;\r\n        }\r\n    }\r\n\r\n    angular.module('pipButtons.Translate', [])\r\n        .filter('translate', translate);\r\n}","{\r\n\r\nclass FabTooltipVisibilityController {\r\n    private _element;\r\n    private _scope: angular.IScope;\r\n    private _timeout: ng.ITimeoutService;\r\n\r\n    constructor(\r\n        $element: any,\r\n        $attrs: angular.IAttributes,\r\n        $scope: angular.IScope,\r\n        $timeout: ng.ITimeoutService,\r\n        $parse\r\n    ) {\r\n        \"ngInject\";\r\n        let trigGetter = $parse($attrs['pipFabTooltipVisibility']),\r\n            showGetter = $parse($attrs['pipFabShowTooltip']),\r\n            showSetter = showGetter.assign;\r\n\r\n        $scope.$watch(trigGetter, (isOpen) => {\r\n            if (!_.isFunction(showSetter)) return;\r\n\r\n            if (isOpen) {\r\n                $timeout(() => {\r\n                    showSetter($scope, isOpen);\r\n                }, 600);\r\n            } else {\r\n                showSetter($scope, isOpen);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction pipFabTooltipVisibility($parse, $timeout): ng.IDirective {\r\n    return {\r\n        restrict: 'A',\r\n        scope: false,\r\n        controller: FabTooltipVisibilityController\r\n    };\r\n}\r\n\r\nangular\r\n    .module('pipFabTooltipVisibility', [])\r\n    .directive('pipFabTooltipVisibility', pipFabTooltipVisibility);\r\n\r\n}","ï»¿import './refresh_button/RefreshButton';\r\nimport './toggle_buttons/ToggleButtons'\r\nimport './fabs/FabTooltipVisibility';\r\n\r\nangular.module('pipButtons', [\r\n    'pipToggleButtons',\r\n    'pipRefreshButton',\r\n    'pipFabTooltipVisibility'\r\n]);","{\r\n\r\ninterface IRefreshButtonBindings {\r\n    [key: string]: any;\r\n\r\n    text: any;\r\n    visible: any;\r\n    onRefresh: any\r\n}\r\n\r\nconst RefreshButtonBindings: IRefreshButtonBindings = {\r\n    text: '<pipText',\r\n    visible: '<pipVisible',\r\n    onRefresh: '&?pipRefresh'\r\n}\r\n\r\nclass RefreshButtonChanges implements ng.IOnChangesObject, IRefreshButtonBindings {\r\n    [key: string]: ng.IChangesObject < any > ;\r\n    // Not one way bindings\r\n    onRefresh: ng.IChangesObject < ({\r\n        $event: any\r\n    }) => ng.IPromise < any >> ;\r\n    // One way bindings\r\n    text: ng.IChangesObject < string > ;\r\n    visible: ng.IChangesObject < boolean > ;\r\n}\r\n\r\nclass RefreshButtonController implements IRefreshButtonBindings {\r\n\r\n    private _textElement: any;\r\n    private _buttonElement: any;\r\n    private _width: number;\r\n\r\n    public text: string;\r\n    public visible: boolean;\r\n    public onRefresh: (param: {\r\n        $event: ng.IAngularEvent\r\n    }) => ng.IPromise < any > ;\r\n\r\n    constructor(\r\n        private $scope: ng.IScope,\r\n        private $element: any,\r\n        private $attrs: ng.IAttributes\r\n    ) {}\r\n\r\n    public $postLink() {\r\n        this._buttonElement = this.$element.children('.md-button');\r\n        this._textElement = this._buttonElement.children('.pip-refresh-text');\r\n\r\n        this.show();\r\n    }\r\n\r\n    public $onChanges(changes: RefreshButtonChanges) {\r\n        if (changes.visible.currentValue === true) {\r\n            this.text = changes.text.currentValue;\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    public onClick($event) {\r\n        if (this.onRefresh) {\r\n            this.onRefresh({\r\n                $event: $event\r\n            });\r\n        }\r\n    }\r\n\r\n    private show() {\r\n        if (this._textElement === undefined || this._buttonElement === undefined) {\r\n            return;\r\n        }\r\n        // Set new text\r\n        this._textElement.text(this.text);\r\n        // Show button\r\n        this._buttonElement.show();\r\n        // Adjust position\r\n        const width = this._buttonElement.width();\r\n        this._buttonElement.css('margin-left', '-' + width / 2 + 'px');\r\n    }\r\n\r\n    private hide() {\r\n        this._buttonElement.hide();\r\n    }\r\n}\r\n\r\n\r\nconst RefreshButtonComponent: ng.IComponentOptions = {\r\n    bindings: RefreshButtonBindings,\r\n    controller: RefreshButtonController,\r\n    template: '<md-button class=\"pip-refresh-button\" tabindex=\"-1\" ng-click=\"$ctrl.onClick($event)\" aria-label=\"REFRESH\">' +\r\n        '<md-icon md-svg-icon=\"icons:refresh\"></md-icon>' +\r\n        '<span class=\"pip-refresh-text\"></span>' +\r\n        '</md-button>'\r\n};\r\n\r\nangular\r\n    .module('pipRefreshButton', ['ngMaterial'])\r\n    .component('pipRefreshButton', RefreshButtonComponent);\r\n\r\n}","{\r\n\r\nclass ToggleButton {\r\n    id: any;\r\n    name: string;\r\n    disabled: boolean;\r\n    level: number;\r\n    diselectable: boolean;\r\n    filled: boolean;\r\n}\r\n\r\ninterface IToggleButtonsBindings {\r\n    [key: string]: any;\r\n\r\n    ngDisabled: any;\r\n    buttons: any;\r\n    currentButtonValue: any;\r\n    currentButton: any;\r\n    multiselect: any;\r\n    change: any;\r\n    onlyToggle: any\r\n}\r\n\r\nconst ToggleButtonsBindings: IToggleButtonsBindings = {\r\n    ngDisabled: '<?',\r\n    buttons: '<pipButtons',\r\n    currentButtonValue: '=ngModel',\r\n    currentButton: '=?pipButtonObject',\r\n    multiselect: '<?pipMultiselect',\r\n    change: '&ngChange',\r\n    onlyToggle: '<?pipOnlyToggle'\r\n}\r\n\r\nclass ToggleButtonsChanges implements ng.IOnChangesObject, IToggleButtonsBindings {\r\n    [key: string]: ng.IChangesObject < any > ;\r\n    // Not one way bindings\r\n    currentButtonValue: any;\r\n    currentButton: any;\r\n    change: ng.IChangesObject < () => ng.IPromise < void >> ;\r\n    // One way bindings\r\n    ngDisabled: ng.IChangesObject < boolean > ;\r\n    buttons: ng.IChangesObject < ToggleButton[] > ;\r\n    multiselect: ng.IChangesObject < boolean > ;\r\n    onlyToggle: ng.IChangesObject < boolean > ;\r\n}\r\n\r\nclass ToggleButtonsController implements IToggleButtonsBindings {\r\n    lenght: number;\r\n\r\n    public ngDisabled: boolean;\r\n    public class: string;\r\n    public multiselect: boolean;\r\n    public buttons: ToggleButton[];\r\n    public disabled: boolean;\r\n    public currentButtonValue: any;\r\n    public currentButtonIndex: number;\r\n    public currentButton: any;\r\n    public change: () => ng.IPromise < any > ;\r\n    public onlyToggle: boolean;\r\n    public pipMedia: any;\r\n\r\n    constructor(\r\n        private $element: any,\r\n        private $attrs: angular.IAttributes,\r\n        private $scope: angular.IScope,\r\n        private $timeout: ng.ITimeoutService,\r\n        $injector: ng.auto.IInjectorService\r\n    ) {\r\n        \"ngInject\";\r\n\r\n        this.pipMedia = $injector.has('pipMedia') ? $injector.get('pipMedia') : null;\r\n        this.class = $attrs['class'] || '';\r\n        const index = _.indexOf(this.buttons, _.find(this.buttons, {\r\n            id: this.currentButtonValue\r\n        }));\r\n        this.currentButtonIndex = index < 0 ? 0 : index;\r\n        this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\r\n    }\r\n\r\n    public $onChanges(changes: ToggleButtonsChanges) {\r\n        this.multiselect = changes.multiselect ? changes.multiselect.currentValue : false;\r\n        this.disabled = changes.ngDisabled ? changes.ngDisabled.currentValue : false;\r\n        this.onlyToggle = changes.onlyToggle ? changes.onlyToggle.currentValue : false;\r\n\r\n        this.buttons = !changes.buttons || _.isArray(changes.buttons.currentValue) && changes.buttons.currentValue.length === 0 ? [] : changes.buttons.currentValue;\r\n\r\n        const index = _.indexOf(this.buttons, _.find(this.buttons, {\r\n            id: this.currentButtonValue\r\n        }));\r\n        this.currentButtonIndex = index < 0 ? 0 : index;\r\n        this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\r\n    }\r\n\r\n    public $postLink() {\r\n        this.$element\r\n            .on('focusin', () => {\r\n                this.$element.addClass('focused-container');\r\n            })\r\n            .on('focusout', () => {\r\n                this.$element.removeClass('focused-container');\r\n            });\r\n    }\r\n\r\n    public buttonSelected(index) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.currentButtonIndex = index;\r\n        this.currentButton = this.buttons[this.currentButtonIndex];\r\n        this.currentButtonValue = this.currentButton.id || index;\r\n\r\n        this.$timeout(() => {\r\n            if (this.change) {\r\n                this.change();\r\n            }\r\n        });\r\n    }\r\n\r\n    public enterSpacePress(event) {\r\n        this.buttonSelected(event.index);\r\n    }\r\n\r\n    public highlightButton(index) {\r\n        if (this.multiselect &&\r\n            !_.isUndefined(this.currentButton.level) &&\r\n            !_.isUndefined(this.buttons[index].level)) {\r\n\r\n            return this.currentButton.level >= this.buttons[index].level;\r\n        }\r\n\r\n        return this.currentButtonIndex == index;\r\n    }\r\n}\r\n\r\nconst ToggleButtons: ng.IComponentOptions = {\r\n    bindings: ToggleButtonsBindings,\r\n    templateUrl: 'toggle_buttons/ToggleButtons.html',\r\n    controller: ToggleButtonsController\r\n}\r\n\r\nangular\r\n    .module('pipToggleButtons', ['pipButtons.Templates'])\r\n    .component('pipToggleButtons', ToggleButtons);\r\n\r\n}","(function(module) {\ntry {\n  module = angular.module('pipButtons.Templates');\n} catch (e) {\n  module = angular.module('pipButtons.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('toggle_buttons/ToggleButtons.html',\n    '<div class=\"pip-toggle-buttons layout-row {{$ctrl.class}}\" pip-selected=\"$ctrl.bufButtonIndex\" pip-enter-space-press=\"$ctrl.enterSpacePress($event)\" ng-if=\"!$ctrl.pipMedia(\\'xs\\') || $ctrl.onlyToggle\"><md-button tabindex=\"-1\" ng-repeat=\"button in $ctrl.buttons\" ng-class=\"{\\'md-accent md-raised selected color-accent-bg\\' : $ctrl.highlightButton($index)}\" ng-attr-style=\"{{ \\'background-color:\\' + ($ctrl.highlightButton($index) ? button.backgroundColor : \\'\\') + \\'!important\\' }}\" class=\"pip-selectable pip-chip-button flex\" ng-click=\"$ctrl.buttonSelected($index, $event)\" ng-disabled=\"button.disabled || $ctrl.disabled\">{{button.name || button.title | translate}} <span ng-if=\"button.checked || button.complete || button.filled\" class=\"pip-tagged\">*</span></md-button></div><md-input-container class=\"md-block\" ng-if=\"$ctrl.pipMedia(\\'xs\\') && !$ctrl.onlyToggle\"><md-select ng-model=\"$ctrl.currentButtonIndex\" ng-disabled=\"$ctrl.disabled\" aria-label=\"DROPDOWN\" md-on-close=\"$ctrl.buttonSelected($ctrl.currentButtonIndex)\"><md-option ng-repeat=\"action in $ctrl.buttons\" value=\"{{ ::$index }}\">{{ (action.title || action.name) | translate }} <span ng-if=\"action.checked || action.complete || action.filled\" class=\"pip-tagged\">*</span></md-option></md-select></md-input-container>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-buttons-html.min.js.map\n"]}