{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/buttons.ts","src/dependencies/translate.ts","src/fabs/fab_tooltip_visibility.ts","src/refresh_button/refresh_button.ts","src/toggle_buttons/toggle_buttons.ts","temp/pip-webui-buttons-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","buttons","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","angular","thisModule","filter","$injector","pipTranslate","has","get","key","translate","directive","$parse","$timeout","restrict","scope","controller","$scope","$attrs","trigGetter","pipFabTooltipVisibility","showGetter","pipFabShowTooltip","showSetter","assign","$watch","isOpen","template","String","replace","link","$element","hide","$button","width","text","show","textGetter","pipText","visibleGetter","pipVisible","refreshGetter","pipRefresh","children","$text","css","onClick","newValue","ngDisabled","currentButtonValue","currentButton","multiselect","change","onlyToggle","templateUrl","$mdMedia","index","class","_","isArray","indexOf","find","id","currentButtonIndex","buttonSelected","disabled","enterSpacePress","event","highlightButton","undefined","level","elem","on","addClass","removeClass","run","$templateCache","put"],"mappings":"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","file":"pip-webui-buttons.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","ï»¿/// <reference path=\"../typings/tsd.d.ts\" />\n\n(function () {\n    'use strict';\n\n    angular.module('pipButtons', [\n        'pipToggleButtons',\n        'pipRefreshButton',\n        'pipFabTooltipVisibility'\n    ]);\n\n})();\n\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipButtons.Translate', []);\n\n    thisModule.filter('translate', function ($injector) {\n        var pipTranslate = $injector.has('pipTranslate') \n            ? $injector.get('pipTranslate') : null;\n\n        return function (key) {\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\n        }\n    });\n\n})();\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n(function(){\n    'use strict';\n\n    var thisModule = angular.module(\"pipFabTooltipVisibility\", []);\n\n    thisModule.directive(\"pipFabTooltipVisibility\", function ($parse, $timeout) {\n        return {\n            restrict: 'A',\n            scope: false,\n            controller: function($scope, $attrs) {\n                var trigGetter = $parse($attrs.pipFabTooltipVisibility),\n                    showGetter = $parse($attrs.pipFabShowTooltip),\n                    showSetter = showGetter.assign;\n\n                $scope.$watch(trigGetter, function(isOpen) {\n                    if (isOpen) {\n                        $timeout(function() {\n                            showSetter($scope, isOpen);\n                        }, 600);\n                    } else {\n                        showSetter($scope, isOpen);\n                    }\n                });\n            }\n        };\n    });\n\n})();\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipRefreshButton', ['ngMaterial']);\n\n    thisModule.directive('pipRefreshButton',\n        function ($parse) {\n            return {\n                restrict: 'EA',\n                scope: false,\n                template: String() +\n                '<md-button class=\"pip-refresh-button\" tabindex=\"-1\" ng-click=\"onClick($event)\" aria-label=\"REFRESH\">' +\n                '<md-icon md-svg-icon=\"icons:refresh\"></md-icon>' +\n                '<span class=\"pip-refresh-text\"></span>' +\n                '</md-button>',\n                replace: false,\n                link: function ($scope, $element, $attrs: any) {\n                    var width, text, show,\n                        textGetter = $parse($attrs.pipText),\n                        visibleGetter = $parse($attrs.pipVisible),\n                        refreshGetter = $parse($attrs.pipRefresh),\n                        $button = $element.children('.md-button'),\n                        $text = $button.children('.pip-refresh-text');\n\n                    show = function () {\n                        // Set a new text\n                        text = textGetter($scope);\n                        $text.text(text);\n\n                        // Show button\n                        $button.show();\n\n                        // Adjust position\n                        width = $button.width();\n                        $button.css('margin-left', '-' + width / 2 + 'px');\n                    };\n\n                    function hide() {\n                        $button.hide();\n                    }\n\n                    (<any>$scope).onClick = function () {\n                        refreshGetter($scope);\n                    };\n\n                    $scope.$watch(visibleGetter, function (newValue) {\n                        if (newValue) {\n                            show();\n                        } else {\n                            hide();\n                        }\n                    });\n\n                    $scope.$watch(textGetter, function (newValue: string) {\n                        $text.text(newValue);\n                    });\n                }\n            };\n        }\n    );\n\n})();\n\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipToggleButtons', ['pipButtons.Templates']);\n\n    thisModule.directive('pipToggleButtons',\n        function () {\n            return {\n                restrict: 'EA',\n                scope: {\n                    ngDisabled: '&',\n                    buttons: '=pipButtons',\n                    currentButtonValue: '=ngModel',\n                    currentButton: '=?pipButtonObject',\n                    multiselect: '=?pipMultiselect',\n                    change: '&ngChange',\n                    onlyToggle: '=?pipOnlyToggle'\n                },\n                templateUrl: 'toggle_buttons/toggle_buttons.html',\n                controller: function ($scope, $element, $attrs, $mdMedia, $timeout) {\n                    var index;\n\n                    $scope.$mdMedia = $mdMedia;\n                    $scope.class = $attrs.class || '';\n                    $scope.multiselect = $scope.multiselect || false;\n\n                    if (!$scope.buttons || _.isArray($scope.buttons) && $scope.buttons.length === 0) {\n                        $scope.buttons = [];\n                    }\n\n                    index = _.indexOf($scope.buttons, _.find($scope.buttons, {id: $scope.currentButtonValue}));\n                    $scope.currentButtonIndex = index < 0 ? 0 : index;\n                    $scope.currentButton = $scope.buttons.length > 0 ? $scope.buttons[$scope.currentButtonIndex]\n                        : $scope.currentButton;\n\n                    $scope.buttonSelected = function (index) {\n                        if ($scope.disabled()) {\n                            return;\n                        }\n\n                        $scope.currentButtonIndex = index;\n                        $scope.currentButton = $scope.buttons[$scope.currentButtonIndex];\n                        $scope.currentButtonValue = $scope.currentButton.id || index;\n\n                        $timeout(function () {\n                            if ($scope.change) {\n                                $scope.change();\n                            }\n                        });\n                    };\n\n                    $scope.enterSpacePress = function (event) {\n                        $scope.buttonSelected(event.index);\n                    };\n\n                    $scope.disabled = function () {\n                        if ($scope.ngDisabled) {\n                            return $scope.ngDisabled();\n                        }\n                    };\n\n                    $scope.highlightButton = function (index) {\n                        if ($scope.multiselect && $scope.currentButton.level !== undefined && $scope.buttons[index].level !== undefined) {\n                           return $scope.currentButton.level >= $scope.buttons[index].level;\n                        } else {\n                            return $scope.currentButtonIndex == index;\n                        }\n                    }\n                },\n                link: function (scope, elem) {\n                    elem\n                        .on('focusin', function () {\n                            elem.addClass('focused-container');\n                        })\n                        .on('focusout', function () {\n                            elem.removeClass('focused-container');\n                        });\n                }\n            };\n        }\n    );\n\n})();\n","(function(module) {\ntry {\n  module = angular.module('pipButtons.Templates');\n} catch (e) {\n  module = angular.module('pipButtons.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('toggle_buttons/toggle_buttons.html',\n    '<div class=\"pip-toggle-buttons layout-row {{class}}\" pip-selected=\"bufButtonIndex\" pip-enter-space-press=\"enterSpacePress($event)\" ng-if=\"$mdMedia(\\'gt-xs\\') || onlyToggle\"><md-button tabindex=\"-1\" ng-repeat=\"button in buttons\" ng-class=\"{\\'md-accent md-raised selected color-accent-bg\\' : highlightButton($index)}\" ng-attr-style=\"{{ \\'background-color:\\' + (highlightButton($index) ? button.backgroundColor : \\'\\') + \\'!important\\' }}\" class=\"pip-selectable pip-chip-button flex\" ng-click=\"buttonSelected($index, $event)\" ng-disabled=\"button.disabled || disabled()\">{{button.name || button.title | translate}} <span ng-if=\"button.checked || button.complete || button.filled\" class=\"pip-tagged\">*</span></md-button></div><md-input-container class=\"md-block\" ng-if=\"$mdMedia(\\'xs\\') && !onlyToggle\"><md-select ng-model=\"currentButtonIndex\" ng-disabled=\"disabled()\" aria-label=\"DROPDOWN\" md-on-close=\"buttonSelected(currentButtonIndex)\"><md-option ng-repeat=\"action in buttons\" value=\"{{ ::$index }}\">{{ (action.title || action.name) | translate }} <span ng-if=\"action.checked || action.complete || action.filled\" class=\"pip-tagged\">*</span></md-option></md-select></md-input-container>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-buttons-html.min.js.map\n"]}