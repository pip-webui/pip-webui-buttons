{"version":3,"sources":["toggle_buttons/toggle_buttons.html","buttons.ts","dependencies/translate.ts","fabs/fab_tooltip_visibility.ts","refresh_button/refresh_button.ts","toggle_buttons/toggle_buttons.ts"],"names":["module","angular","e","run","$templateCache","put","thisModule","filter","$injector","pipTranslate","has","get","key","translate","directive","$parse","$timeout","restrict","scope","controller","$scope","$attrs","trigGetter","pipFabTooltipVisibility","showGetter","pipFabShowTooltip","showSetter","assign","$watch","isOpen","template","String","replace","link","$element","hide","$button","width","text","show","textGetter","pipText","visibleGetter","pipVisible","refreshGetter","pipRefresh","children","$text","css","onClick","newValue","ngDisabled","buttons","currentButtonValue","currentButton","change","templateUrl","$mdMedia","index","class","_","isArray","length","indexOf","find","id","currentButtonIndex","buttonSelected","disabled","enterSpacePress","event","elem","on","addClass","removeClass"],"mappings":"CAAA,SAAAA,GACA,IACAA,EAAAC,QAAAD,OAAA,wBACA,MAAAE,GACAF,EAAAC,QAAAD,OAAA,2BAEAA,EAAAG,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,qCACA,upCCNA,WACI,YAEAJ,SAAQD,OAAO,cACX,mBACA,mBACA,+BCNR,WACI,YAEA,IAAIM,GAAaL,QAAQD,OAAO,0BAEhCM,GAAWC,OAAO,aAAa,YAAU,SAASC,GAC9C,GAAIC,GAAeD,EAAUE,IAAI,gBAC3BF,EAAUG,IAAI,gBAAkB,IAEtC,OAAO,UAAUC,GACb,MAAOH,GAAgBA,EAAaI,UAAUD,IAAQA,EAAMA,SCVxE,WACI,YAEA,IAAIN,GAAaL,QAAQD,OAAO,6BAEhCM,GAAWQ,UAAU,2BAA2B,SAAU,WAAQ,SAAQC,EAAAC,GACtE,OACIC,SAAU,IACVC,OAAO,EACPC,YAAY,SAAS,SAAQ,SAAMC,EAAAC,GAC/B,GAAIC,GAAaP,EAAOM,EAAOE,yBAC3BC,EAAaT,EAAOM,EAAOI,mBAC3BC,EAAaF,EAAWG,MAE5BP,GAAOQ,OAAON,EAAY,SAASO,GAC3BA,EACAb,EAAS,WACLU,EAAWN,EAAQS,IACpB,KAEHH,EAAWN,EAAQS,cCpB3C,WACI,YAEA,IAAIvB,GAAaL,QAAQD,OAAO,oBAAqB,cAErDM,GAAWQ,UAAU,oBACjB,SAAU,SAAMC,GACZ,OACIE,SAAU,KACVC,OAAO,EACPY,SAAUC,SACV,wMAIAC,SAAS,EACTC,KAAM,SAAUb,EAAQc,EAAUb,GAqB9B,QAAAc,KACIC,EAAQD,OArBZ,GAAIE,GAAOC,EAAMC,EACbC,EAAazB,EAAOM,EAAOoB,SAC3BC,EAAgB3B,EAAOM,EAAOsB,YAC9BC,EAAgB7B,EAAOM,EAAOwB,YAC9BT,EAAUF,EAASY,SAAS,cAC5BC,EAAQX,EAAQU,SAAS,oBAE7BP,GAAO,WAEHD,EAAOE,EAAWpB,GAClB2B,EAAMT,KAAKA,GAGXF,EAAQG,OAGRF,EAAQD,EAAQC,QAChBD,EAAQY,IAAI,cAAe,IAAMX,EAAQ,EAAI,OAOjDjB,EAAO6B,QAAU,WACbL,EAAcxB,IAGlBA,EAAOQ,OAAOc,EAAe,SAAUQ,GAC/BA,EACAX,IAEAJ,MAIRf,EAAOQ,OAAOY,EAAY,SAAUU,GAChCH,EAAMT,KAAKY,aCtDnC,WACI,YAEA,IAAI5C,GAAaL,QAAQD,OAAO,oBAAqB,wBAErDM,GAAWQ,UAAU,mBACjB,WACI,OACIG,SAAU,KACVC,OACIiC,WAAY,IACZC,QAAS,cACTC,mBAAoB,WACpBC,cAAe,oBACfC,OAAQ,aAEZC,YAAa,qCACbrC,YAAY,SAAU,WAAQ,SAAU,WAAgB,WAAU,SAAAC,EAAAc,EAAAb,EAAAoC,EAAAzC,GAC9D,GAAI0C,EAEJtC,GAAOqC,SAAWA,EAClBrC,EAAOuC,MAAQtC,EAAOsC,OAAS,KAE1BvC,EAAOgC,SAAWQ,EAAEC,QAAQzC,EAAOgC,UAAsC,IAA1BhC,EAAOgC,QAAQU,UAC/D1C,EAAOgC,YAGXM,EAAQE,EAAEG,QAAQ3C,EAAOgC,QAASQ,EAAEI,KAAK5C,EAAOgC,SAAUa,GAAI7C,EAAOiC,sBACrEjC,EAAO8C,mBAAqBR,EAAQ,EAAI,EAAIA,EAC5CtC,EAAOkC,cAAgBlC,EAAOgC,QAAQU,OAAS,EAAI1C,EAAOgC,QAAQhC,EAAO8C,oBACnE9C,EAAOkC,cAEblC,EAAO+C,eAAiB,SAAUT,GAC1BtC,EAAOgD,aAIXhD,EAAO8C,mBAAqBR,EAC5BtC,EAAOkC,cAAgBlC,EAAOgC,QAAQhC,EAAO8C,oBAC7C9C,EAAOiC,mBAAqBjC,EAAOkC,cAAcW,IAAMP,EAEvD1C,EAAS,WACDI,EAAOmC,QACPnC,EAAOmC,aAKnBnC,EAAOiD,gBAAkB,SAAUC,GAC/BlD,EAAO+C,eAAeG,EAAMZ,QAGhCtC,EAAOgD,SAAW,WACd,GAAIhD,EAAO+B,WACP,MAAO/B,GAAO+B,gBAI1BlB,KAAM,SAAUf,EAAOqD,GACnBA,EACKC,GAAG,UAAW,WACXD,EAAKE,SAAS,uBAEjBD,GAAG,WAAY,WACZD,EAAKG,YAAY","file":"pip-webui-buttons.min.js","sourcesContent":["<div class=\"pip-toggle-buttons layout-row {{class}}\" pip-selected=\"bufButtonIndex\" pip-enter-space-press=\"enterSpacePress($event)\"\r\n     ng-if=\"$mdMedia('gt-xs')\">\r\n    <md-button tabindex=\"-1\" ng-repeat=\"button in buttons\"\r\n               ng-class=\"{'md-accent md-raised selected color-accent-bg' : currentButtonIndex == $index}\"\r\n               ng-attr-style=\"{{ 'background-color:' + (currentButtonIndex == $index ? button.backgroundColor : '') + '!important' }}\"\r\n               class=\"pip-selectable pip-chip-button flex\" ng-click=\"buttonSelected($index, $event)\"\r\n               ng-disabled=\"button.disabled || disabled()\">\r\n        {{button.name || button.title | translate}}\r\n        <span ng-if=\"button.checked || button.complete || button.filled\" class=\"pip-tagged\">*</span>\r\n    </md-button>\r\n</div>\r\n\r\n<md-input-container class=\"md-block\" ng-if=\"$mdMedia('xs')\">\r\n    <md-select ng-model=\"currentButtonIndex\" ng-disabled=\"disabled()\" aria-label=\"DROPDOWN\" md-on-close=\"buttonSelected(currentButtonIndex)\">\r\n        <md-option ng-repeat=\"action in buttons\" value=\"{{ ::$index }}\">\r\n            {{ (action.title || action.name) | translate }}\r\n            <span ng-if=\"action.checked || action.complete || action.filled\" class=\"pip-tagged\">*</span>\r\n        </md-option>\r\n    </md-select>\r\n</md-input-container>\r\n","/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('pipButtons', [\r\n        'pipToggleButtons',\r\n        'pipRefreshButton',\r\n        'pipFabTooltipVisibility'\r\n    ]);\r\n\r\n})();\r\n\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipButtons.Translate', []);\r\n\r\n    thisModule.filter('translate', function ($injector) {\r\n        var pipTranslate = $injector.has('pipTranslate') \r\n            ? $injector.get('pipTranslate') : null;\r\n\r\n        return function (key) {\r\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\r\n        }\r\n    });\r\n\r\n})();\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    var thisModule = angular.module(\"pipFabTooltipVisibility\", []);\r\n\r\n    thisModule.directive(\"pipFabTooltipVisibility\", function ($parse, $timeout) {\r\n        return {\r\n            restrict: 'A',\r\n            scope: false,\r\n            controller: function($scope, $attrs) {\r\n                var trigGetter = $parse($attrs.pipFabTooltipVisibility),\r\n                    showGetter = $parse($attrs.pipFabShowTooltip),\r\n                    showSetter = showGetter.assign;\r\n\r\n                $scope.$watch(trigGetter, function(isOpen) {\r\n                    if (isOpen) {\r\n                        $timeout(function() {\r\n                            showSetter($scope, isOpen);\r\n                        }, 600);\r\n                    } else {\r\n                        showSetter($scope, isOpen);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    });\r\n\r\n})();\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipRefreshButton', ['ngMaterial']);\r\n\r\n    thisModule.directive('pipRefreshButton',\r\n        function ($parse) {\r\n            return {\r\n                restrict: 'EA',\r\n                scope: false,\r\n                template: String() +\r\n                '<md-button class=\"pip-refresh-button\" tabindex=\"-1\" ng-click=\"onClick($event)\" aria-label=\"REFRESH\">' +\r\n                '<md-icon md-svg-icon=\"icons:refresh\"></md-icon>' +\r\n                '<span class=\"pip-refresh-text\"></span>' +\r\n                '</md-button>',\r\n                replace: false,\r\n                link: function ($scope, $element, $attrs: any) {\r\n                    var width, text, show,\r\n                        textGetter = $parse($attrs.pipText),\r\n                        visibleGetter = $parse($attrs.pipVisible),\r\n                        refreshGetter = $parse($attrs.pipRefresh),\r\n                        $button = $element.children('.md-button'),\r\n                        $text = $button.children('.pip-refresh-text');\r\n\r\n                    show = function () {\r\n                        // Set a new text\r\n                        text = textGetter($scope);\r\n                        $text.text(text);\r\n\r\n                        // Show button\r\n                        $button.show();\r\n\r\n                        // Adjust position\r\n                        width = $button.width();\r\n                        $button.css('margin-left', '-' + width / 2 + 'px');\r\n                    };\r\n\r\n                    function hide() {\r\n                        $button.hide();\r\n                    }\r\n\r\n                    $scope.onClick = function () {\r\n                        refreshGetter($scope);\r\n                    };\r\n\r\n                    $scope.$watch(visibleGetter, function (newValue) {\r\n                        if (newValue) {\r\n                            show();\r\n                        } else {\r\n                            hide();\r\n                        }\r\n                    });\r\n\r\n                    $scope.$watch(textGetter, function (newValue) {\r\n                        $text.text(newValue);\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    );\r\n\r\n})();\r\n\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipToggleButtons', ['pipButtons.Templates']);\r\n\r\n    thisModule.directive('pipToggleButtons',\r\n        function () {\r\n            return {\r\n                restrict: 'EA',\r\n                scope: {\r\n                    ngDisabled: '&',\r\n                    buttons: '=pipButtons',\r\n                    currentButtonValue: '=ngModel',\r\n                    currentButton: '=?pipButtonObject',\r\n                    change: '&ngChange'\r\n                },\r\n                templateUrl: 'toggle_buttons/toggle_buttons.html',\r\n                controller: function ($scope, $element, $attrs, $mdMedia, $timeout) {\r\n                    var index;\r\n\r\n                    $scope.$mdMedia = $mdMedia;\r\n                    $scope.class = $attrs.class || '';\r\n\r\n                    if (!$scope.buttons || _.isArray($scope.buttons) && $scope.buttons.length === 0) {\r\n                        $scope.buttons = [];\r\n                    }\r\n\r\n                    index = _.indexOf($scope.buttons, _.find($scope.buttons, {id: $scope.currentButtonValue}));\r\n                    $scope.currentButtonIndex = index < 0 ? 0 : index;\r\n                    $scope.currentButton = $scope.buttons.length > 0 ? $scope.buttons[$scope.currentButtonIndex]\r\n                        : $scope.currentButton;\r\n\r\n                    $scope.buttonSelected = function (index) {\r\n                        if ($scope.disabled()) {\r\n                            return;\r\n                        }\r\n\r\n                        $scope.currentButtonIndex = index;\r\n                        $scope.currentButton = $scope.buttons[$scope.currentButtonIndex];\r\n                        $scope.currentButtonValue = $scope.currentButton.id || index;\r\n\r\n                        $timeout(function () {\r\n                            if ($scope.change) {\r\n                                $scope.change();\r\n                            }\r\n                        });\r\n                    };\r\n\r\n                    $scope.enterSpacePress = function (event) {\r\n                        $scope.buttonSelected(event.index);\r\n                    };\r\n\r\n                    $scope.disabled = function () {\r\n                        if ($scope.ngDisabled) {\r\n                            return $scope.ngDisabled();\r\n                        }\r\n                    };\r\n                },\r\n                link: function (scope, elem) {\r\n                    elem\r\n                        .on('focusin', function () {\r\n                            elem.addClass('focused-container');\r\n                        })\r\n                        .on('focusout', function () {\r\n                            elem.removeClass('focused-container');\r\n                        });\r\n                }\r\n            };\r\n        }\r\n    );\r\n\r\n})();\r\n"]}