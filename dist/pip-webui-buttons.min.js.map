{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/buttons.ts","src/dependencies/translate.ts","src/fabs/fab_tooltip_visibility.ts","src/refresh_button/refresh_button.ts","src/toggle_buttons/toggle_buttons.ts","temp/pip-webui-buttons-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","buttons","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","angular","ToggleButtonsFilter","$injector","pipTranslate","has","get","key","$inject","filter","3","FabTooltipVisibilityController","$element","$attrs","$scope","$timeout","$parse","trigGetter","showGetter","showSetter","assign","isOpen","_","isFunction","pipFabTooltipVisibility","restrict","scope","controller","directive","4","RefreshButtonBindings","text","visible","onRefresh","RefreshButtonChanges","RefreshButtonController","prototype","$postLink","_buttonElement","children","_textElement","show","$onChanges","changes","currentValue","hide","onClick","$event","undefined","width","css","RefreshButtonComponent","component","5","ToggleButtonsBindings","ToggleButton","ngDisabled","currentButtonValue","currentButton","multiselect","change","onlyToggle","ToggleButtonsChanges","ToggleButtonsController","pipMedia","class","index","indexOf","find","id","currentButtonIndex","disabled","isArray","_this","on","addClass","removeClass","buttonSelected","enterSpacePress","event","highlightButton","isUndefined","level","ToggleButtons","bindings","6","run","$templateCache","put"],"mappings":"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","file":"pip-webui-buttons.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","ï»¿/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('pipButtons', [\r\n        'pipToggleButtons',\r\n        'pipRefreshButton',\r\n        'pipFabTooltipVisibility'\r\n    ]);\r\n\r\n})();\r\n\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    function ToggleButtonsFilter($injector: ng.auto.IInjectorService) {\r\n        const pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\r\n\r\n        return function(key: string) {\r\n            return pipTranslate  ? pipTranslate['translate'](key) || key : key;\r\n        }\r\n    }\r\n\r\n    angular.module('pipButtons.Translate', [])\r\n        .filter('translate', ToggleButtonsFilter);\r\n\r\n})();\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\nclass FabTooltipVisibilityController {\r\n    private _element;\r\n    private _scope: angular.IScope;\r\n    private _timeout: ng.ITimeoutService;\r\n\r\n    constructor(\r\n        $element: any,\r\n        $attrs: angular.IAttributes,\r\n        $scope: angular.IScope,\r\n        $timeout: ng.ITimeoutService,\r\n        $parse\r\n    ) {\r\n        \"ngInject\";\r\n        let trigGetter = $parse($attrs['pipFabTooltipVisibility']),\r\n            showGetter = $parse($attrs['pipFabShowTooltip']),\r\n            showSetter = showGetter.assign;\r\n\r\n        $scope.$watch(trigGetter, (isOpen) => {\r\n            if (!_.isFunction(showSetter)) return;\r\n\r\n            if (isOpen) {\r\n                $timeout(() => {\r\n                    showSetter($scope, isOpen);\r\n                }, 600);\r\n            } else {\r\n                showSetter($scope, isOpen);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n(() => {\r\n    function pipFabTooltipVisibility($parse, $timeout) {\r\n        return {\r\n            restrict: 'A',\r\n            scope: false,\r\n            controller: FabTooltipVisibilityController\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('pipFabTooltipVisibility', [])\r\n        .directive('pipFabTooltipVisibility', pipFabTooltipVisibility);\r\n\r\n})();","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\ninterface IRefreshButtonBindings {\r\n    [key: string]: any;\r\n\r\n    text: any,\r\n    visible: any,\r\n    onRefresh: any\r\n}\r\n\r\nconst RefreshButtonBindings: IRefreshButtonBindings = {\r\n    text: '<pipText',\r\n    visible: '<pipVisible',\r\n    onRefresh: '&?pipRefresh'\r\n}\r\n\r\nclass RefreshButtonChanges implements ng.IOnChangesObject, IRefreshButtonBindings {\r\n    [key: string]: ng.IChangesObject<any>;\r\n    // Not one way bindings\r\n    onRefresh: ng.IChangesObject<({$event: any}) => ng.IPromise<any>>;\r\n    // One way bindings\r\n    text: ng.IChangesObject<string>;\r\n    visible: ng.IChangesObject<boolean>;\r\n}\r\n\r\nclass RefreshButtonController implements IRefreshButtonBindings {\r\n\r\n    private _textElement: any;\r\n    private _buttonElement: any;\r\n    private _width: number;\r\n\r\n    public text: string;\r\n    public visible: boolean;\r\n    public onRefresh: (param: {$event: ng.IAngularEvent}) => ng.IPromise<any>;\r\n\r\n    constructor(\r\n        private $scope: ng.IScope,\r\n        private $element: any,\r\n        private $attrs: ng.IAttributes\r\n    ) { }\r\n\r\n    public $postLink() {\r\n        this._buttonElement = this.$element.children('.md-button');\r\n        this._textElement = this._buttonElement.children('.pip-refresh-text');\r\n        \r\n        this.show();\r\n    }\r\n\r\n    public $onChanges(changes: RefreshButtonChanges) {\r\n        if (changes.visible.currentValue === true) {\r\n            this.text = changes.text.currentValue;\r\n            this.show();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    public onClick($event) {\r\n        if (this.onRefresh) {\r\n            this.onRefresh({$event: $event});\r\n        }\r\n    }\r\n\r\n    private show() {\r\n        if (this._textElement === undefined || this._buttonElement === undefined) {\r\n            return;\r\n        }\r\n        // Set new text\r\n        this._textElement.text(this.text);\r\n        // Show button\r\n        this._buttonElement.show();\r\n        // Adjust position\r\n        const width = this._buttonElement.width();\r\n        this._buttonElement.css('margin-left', '-' + width / 2 + 'px');\r\n    }\r\n\r\n    private hide() {\r\n        this._buttonElement.hide();\r\n    }\r\n}\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    const RefreshButtonComponent = {\r\n        bindings: RefreshButtonBindings,\r\n        controller: RefreshButtonController,\r\n        template: '<md-button class=\"pip-refresh-button\" tabindex=\"-1\" ng-click=\"$ctrl.onClick($event)\" aria-label=\"REFRESH\">' +\r\n            '<md-icon md-svg-icon=\"icons:refresh\"></md-icon>' +\r\n            '<span class=\"pip-refresh-text\"></span>' +\r\n            '</md-button>'\r\n    };\r\n\r\n    angular.module('pipRefreshButton', ['ngMaterial'])\r\n        .component('pipRefreshButton', RefreshButtonComponent);\r\n\r\n})();","// /// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\nclass ToggleButton {\r\n    id: any;\r\n    name: string;\r\n    disabled: boolean;\r\n    level: number;\r\n    diselectable: boolean;\r\n    filled: boolean;\r\n}\r\n\r\ninterface IToggleButtonsBindings {\r\n    [key: string]: any;\r\n\r\n    ngDisabled: any,\r\n    buttons: any,\r\n    currentButtonValue: any,\r\n    currentButton: any,\r\n    multiselect: any,\r\n    change: any,\r\n    onlyToggle: any\r\n}\r\n\r\nconst ToggleButtonsBindings: IToggleButtonsBindings = {\r\n    ngDisabled: '<?',\r\n    buttons: '<pipButtons',\r\n    currentButtonValue: '=ngModel',\r\n    currentButton: '=?pipButtonObject',\r\n    multiselect: '<?pipMultiselect',\r\n    change: '&ngChange',\r\n    onlyToggle: '<?pipOnlyToggle'\r\n}\r\n\r\nclass ToggleButtonsChanges implements ng.IOnChangesObject, IToggleButtonsBindings {\r\n    [key: string]: ng.IChangesObject<any>;\r\n    // Not one way bindings\r\n    currentButtonValue: any;\r\n    currentButton: any;\r\n    change: ng.IChangesObject<() => ng.IPromise<void>>;\r\n    // One way bindings\r\n    ngDisabled: ng.IChangesObject<boolean>;\r\n    buttons: ng.IChangesObject<ToggleButton[]>;\r\n    multiselect: ng.IChangesObject<boolean>;\r\n    onlyToggle: ng.IChangesObject<boolean>;\r\n}\r\n\r\nclass ToggleButtonsController implements IToggleButtonsBindings {\r\n    lenght: number;\r\n\r\n    public ngDisabled: boolean;\r\n    public class: string;\r\n    public multiselect: boolean;\r\n    public buttons: ToggleButton[];\r\n    public disabled: boolean;\r\n    public currentButtonValue: any;\r\n    public currentButtonIndex: number;\r\n    public currentButton: any;\r\n    public change: () => ng.IPromise<any>;\r\n    public onlyToggle: boolean;\r\n    public pipMedia: any;\r\n\r\n    constructor(\r\n        private $element: any,\r\n        private $attrs: angular.IAttributes,\r\n        private $scope: angular.IScope,\r\n        private $timeout: ng.ITimeoutService,\r\n        $injector: ng.auto.IInjectorService\r\n    ) {\r\n        \"ngInject\";\r\n\r\n        this.pipMedia = $injector.has('pipMedia') ? $injector.get('pipMedia') : null;\r\n        this.class = $attrs['class'] || '';\r\n        const index = _.indexOf(this.buttons, _.find(this.buttons, {\r\n            id: this.currentButtonValue\r\n        }));\r\n        this.currentButtonIndex = index < 0 ? 0 : index;\r\n        this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\r\n    }\r\n\r\n    public $onChanges(changes: ToggleButtonsChanges) {\r\n        this.multiselect = changes.multiselect ? changes.multiselect.currentValue : false;\r\n        this.disabled = changes.ngDisabled ? changes.ngDisabled.currentValue : false;\r\n        this.onlyToggle = changes.onlyToggle ? changes.onlyToggle.currentValue : false;\r\n\r\n        this.buttons = !changes.buttons || _.isArray(changes.buttons.currentValue) && changes.buttons.currentValue.length === 0 ? \r\n            [] : changes.buttons.currentValue;\r\n\r\n        const index = _.indexOf(this.buttons, _.find(this.buttons, {\r\n            id: this.currentButtonValue\r\n        }));\r\n        this.currentButtonIndex = index < 0 ? 0 : index;\r\n        this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\r\n    }\r\n\r\n    public $postLink() {\r\n        this.$element\r\n            .on('focusin', () => {\r\n                this.$element.addClass('focused-container');\r\n            })\r\n            .on('focusout', () => {\r\n                this.$element.removeClass('focused-container');\r\n            });\r\n    }\r\n\r\n    public buttonSelected(index) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.currentButtonIndex = index;\r\n        this.currentButton = this.buttons[this.currentButtonIndex];\r\n        this.currentButtonValue = this.currentButton.id || index;\r\n\r\n        this.$timeout(() => {\r\n            if (this.change) {\r\n                this.change();\r\n            }\r\n        });\r\n    }\r\n\r\n    public enterSpacePress(event) {\r\n        this.buttonSelected(event.index);\r\n    }\r\n\r\n    public highlightButton(index) {\r\n        if (this.multiselect &&\r\n            !_.isUndefined(this.currentButton.level) &&\r\n            !_.isUndefined(this.buttons[index].level)) {\r\n\r\n            return this.currentButton.level >= this.buttons[index].level;\r\n        }\r\n\r\n        return this.currentButtonIndex == index;\r\n    }\r\n}\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    // We can use this variant, which requires less memory allocation\r\n    /*const ToggleButtons = {\r\n        bindings: ToggleButtonsBindings,\r\n        templateUrl: 'toggle_buttons/toggle_buttons.html',\r\n        controller: ToggleButtonsController,\r\n    }*/\r\n\r\n    // Or this variant, which safer\r\n    /*class ToggleButtons implements ng.IComponentOptions {\r\n        public bindings: IToggleButtonsBindings;\r\n        public controller: ng.Injectable<ng.IControllerConstructor>;\r\n        public templateUrl: string;\r\n\r\n        constructor() {\r\n            this.bindings = ToggleButtonsBindings;\r\n            this.controller = ToggleButtonsController;\r\n            this.templateUrl = 'toggle_buttons/toggle_buttons.html';\r\n        }\r\n    }*/\r\n\r\n    // Or, I think, this variant. \r\n    // This one is safe because we've specified interface and requires less memory allocation because we use constant.\r\n    const ToggleButtons: ng.IComponentOptions = {\r\n        bindings: ToggleButtonsBindings,\r\n        templateUrl: 'toggle_buttons/toggle_buttons.html',\r\n        controller: ToggleButtonsController\r\n    }\r\n\r\n    angular\r\n        .module('pipToggleButtons', ['pipButtons.Templates'])\r\n        .component('pipToggleButtons', ToggleButtons);\r\n    \r\n})();","(function(module) {\ntry {\n  module = angular.module('pipButtons.Templates');\n} catch (e) {\n  module = angular.module('pipButtons.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('toggle_buttons/toggle_buttons.html',\n    '<div class=\"pip-toggle-buttons layout-row {{$ctrl.class}}\" pip-selected=\"$ctrl.bufButtonIndex\" pip-enter-space-press=\"$ctrl.enterSpacePress($event)\" ng-if=\"!$ctrl.pipMedia(\\'xs\\') || $ctrl.onlyToggle\"><md-button tabindex=\"-1\" ng-repeat=\"button in $ctrl.buttons\" ng-class=\"{\\'md-accent md-raised selected color-accent-bg\\' : $ctrl.highlightButton($index)}\" ng-attr-style=\"{{ \\'background-color:\\' + ($ctrl.highlightButton($index) ? button.backgroundColor : \\'\\') + \\'!important\\' }}\" class=\"pip-selectable pip-chip-button flex\" ng-click=\"$ctrl.buttonSelected($index, $event)\" ng-disabled=\"button.disabled || $ctrl.disabled\">{{button.name || button.title | translate}} <span ng-if=\"button.checked || button.complete || button.filled\" class=\"pip-tagged\">*</span></md-button></div><md-input-container class=\"md-block\" ng-if=\"$ctrl.pipMedia(\\'xs\\') && !$ctrl.onlyToggle\"><md-select ng-model=\"$ctrl.currentButtonIndex\" ng-disabled=\"$ctrl.disabled\" aria-label=\"DROPDOWN\" md-on-close=\"$ctrl.buttonSelected($ctrl.currentButtonIndex)\"><md-option ng-repeat=\"action in $ctrl.buttons\" value=\"{{ ::$index }}\">{{ (action.title || action.name) | translate }} <span ng-if=\"action.checked || action.complete || action.filled\" class=\"pip-tagged\">*</span></md-option></md-select></md-input-container>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-buttons-html.min.js.map\n"]}