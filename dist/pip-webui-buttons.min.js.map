{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/buttons.ts","src/dependencies/translate.ts","src/fabs/fab_tooltip_visibility.ts","src/refresh_button/refresh_button.ts","src/toggle_buttons/toggle_buttons.ts","temp/pip-webui-buttons-html.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","angular","thisModule","filter","$injector","pipTranslate","has","get","key","translate","directive","$parse","$timeout","restrict","scope","controller","$scope","$attrs","trigGetter","pipFabTooltipVisibility","showGetter","pipFabShowTooltip","showSetter","assign","$watch","isOpen","template","String","replace","link","$element","hide","$button","width","text","show","textGetter","pipText","visibleGetter","pipVisible","refreshGetter","pipRefresh","children","$text","css","onClick","newValue","ngDisabled","buttons","currentButtonValue","currentButton","change","templateUrl","$mdMedia","index","class","_","isArray","indexOf","find","id","currentButtonIndex","buttonSelected","disabled","enterSpacePress","event","elem","on","addClass","removeClass","run","$templateCache","put"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,ICEA,WACI,YAEAK,SAAQD,OAAO,cACX,mBACA,mBACA,wDCNR,WACI,YAEA,IAAIE,GAAaD,QAAQD,OAAO,0BAEhCE,GAAWC,OAAO,aAAa,YAAU,SAASC,GAC9C,GAAIC,GAAeD,EAAUE,IAAI,gBAC3BF,EAAUG,IAAI,gBAAkB,IAEtC,OAAO,UAAUC,GACb,MAAOH,GAAgBA,EAAaI,UAAUD,IAAQA,EAAMA,kCCVxE,WACI,YAEA,IAAIN,GAAaD,QAAQD,OAAO,6BAEhCE,GAAWQ,UAAU,2BAA2B,SAAU,WAAQ,SAAQC,EAAAC,GACtE,OACIC,SAAU,IACVC,OAAO,EACPC,YAAY,SAAS,SAAQ,SAAMC,EAAAC,GAC/B,GAAIC,GAAaP,EAAOM,EAAOE,yBAC3BC,EAAaT,EAAOM,EAAOI,mBAC3BC,EAAaF,EAAWG,MAE5BP,GAAOQ,OAAON,EAAY,SAASO,GAC3BA,EACAb,EAAS,WACLU,EAAWN,EAAQS,IACpB,KAEHH,EAAWN,EAAQS,uCCpB3C,WACI,YAEA,IAAIvB,GAAaD,QAAQD,OAAO,oBAAqB,cAErDE,GAAWQ,UAAU,oBACjB,SAAU,SAAMC,GACZ,OACIE,SAAU,KACVC,OAAO,EACPY,SAAUC,SACV,wMAIAC,SAAS,EACTC,KAAM,SAAUb,EAAQc,EAAUb,GAqB9B,QAAAc,KACIC,EAAQD,OArBZ,GAAIE,GAAOC,EAAMC,EACbC,EAAazB,EAAOM,EAAOoB,SAC3BC,EAAgB3B,EAAOM,EAAOsB,YAC9BC,EAAgB7B,EAAOM,EAAOwB,YAC9BT,EAAUF,EAASY,SAAS,cAC5BC,EAAQX,EAAQU,SAAS,oBAE7BP,GAAO,WAEHD,EAAOE,EAAWpB,GAClB2B,EAAMT,KAAKA,GAGXF,EAAQG,OAGRF,EAAQD,EAAQC,QAChBD,EAAQY,IAAI,cAAe,IAAMX,EAAQ,EAAI,OAOjDjB,EAAO6B,QAAU,WACbL,EAAcxB,IAGlBA,EAAOQ,OAAOc,EAAe,SAAUQ,GAC/BA,EACAX,IAEAJ,MAIRf,EAAOQ,OAAOY,EAAY,SAAUU,GAChCH,EAAMT,KAAKY,sCCtDnC,WACI,YAEA,IAAI5C,GAAaD,QAAQD,OAAO,oBAAqB,wBAErDE,GAAWQ,UAAU,mBACjB,WACI,OACIG,SAAU,KACVC,OACIiC,WAAY,IACZC,QAAS,cACTC,mBAAoB,WACpBC,cAAe,oBACfC,OAAQ,aAEZC,YAAa,qCACbrC,YAAY,SAAU,WAAQ,SAAU,WAAgB,WAAU,SAAAC,EAAAc,EAAAb,EAAAoC,EAAAzC,GAC9D,GAAI0C,EAEJtC,GAAOqC,SAAWA,EAClBrC,EAAOuC,MAAQtC,EAAOsC,OAAS,KAE1BvC,EAAOgC,SAAWQ,EAAEC,QAAQzC,EAAOgC,UAAsC,IAA1BhC,EAAOgC,QAAQlD,UAC/DkB,EAAOgC,YAGXM,EAAQE,EAAEE,QAAQ1C,EAAOgC,QAASQ,EAAEG,KAAK3C,EAAOgC,SAAUY,GAAI5C,EAAOiC,sBACrEjC,EAAO6C,mBAAqBP,EAAQ,EAAI,EAAIA,EAC5CtC,EAAOkC,cAAgBlC,EAAOgC,QAAQlD,OAAS,EAAIkB,EAAOgC,QAAQhC,EAAO6C,oBACnE7C,EAAOkC,cAEblC,EAAO8C,eAAiB,SAAUR,GAC1BtC,EAAO+C,aAIX/C,EAAO6C,mBAAqBP,EAC5BtC,EAAOkC,cAAgBlC,EAAOgC,QAAQhC,EAAO6C,oBAC7C7C,EAAOiC,mBAAqBjC,EAAOkC,cAAcU,IAAMN,EAEvD1C,EAAS,WACDI,EAAOmC,QACPnC,EAAOmC,aAKnBnC,EAAOgD,gBAAkB,SAAUC,GAC/BjD,EAAO8C,eAAeG,EAAMX,QAGhCtC,EAAO+C,SAAW,WACd,GAAI/C,EAAO+B,WACP,MAAO/B,GAAO+B,gBAI1BlB,KAAM,SAAUf,EAAOoD,GACnBA,EACKC,GAAG,UAAW,WACXD,EAAKE,SAAS,uBAEjBD,GAAG,WAAY,WACZD,EAAKG,YAAY,uDClE7C,SAAArE,GACA,IACAA,EAAAC,QAAAD,OAAA,wBACA,MAAAlB,GACAkB,EAAAC,QAAAD,OAAA,2BAEAA,EAAAsE,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,qCACA","file":"pip-webui-buttons.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","ï»¿/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('pipButtons', [\r\n        'pipToggleButtons',\r\n        'pipRefreshButton',\r\n        'pipFabTooltipVisibility'\r\n    ]);\r\n\r\n})();\r\n\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipButtons.Translate', []);\r\n\r\n    thisModule.filter('translate', function ($injector) {\r\n        var pipTranslate = $injector.has('pipTranslate') \r\n            ? $injector.get('pipTranslate') : null;\r\n\r\n        return function (key) {\r\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\r\n        }\r\n    });\r\n\r\n})();\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    var thisModule = angular.module(\"pipFabTooltipVisibility\", []);\r\n\r\n    thisModule.directive(\"pipFabTooltipVisibility\", function ($parse, $timeout) {\r\n        return {\r\n            restrict: 'A',\r\n            scope: false,\r\n            controller: function($scope, $attrs) {\r\n                var trigGetter = $parse($attrs.pipFabTooltipVisibility),\r\n                    showGetter = $parse($attrs.pipFabShowTooltip),\r\n                    showSetter = showGetter.assign;\r\n\r\n                $scope.$watch(trigGetter, function(isOpen) {\r\n                    if (isOpen) {\r\n                        $timeout(function() {\r\n                            showSetter($scope, isOpen);\r\n                        }, 600);\r\n                    } else {\r\n                        showSetter($scope, isOpen);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    });\r\n\r\n})();\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipRefreshButton', ['ngMaterial']);\r\n\r\n    thisModule.directive('pipRefreshButton',\r\n        function ($parse) {\r\n            return {\r\n                restrict: 'EA',\r\n                scope: false,\r\n                template: String() +\r\n                '<md-button class=\"pip-refresh-button\" tabindex=\"-1\" ng-click=\"onClick($event)\" aria-label=\"REFRESH\">' +\r\n                '<md-icon md-svg-icon=\"icons:refresh\"></md-icon>' +\r\n                '<span class=\"pip-refresh-text\"></span>' +\r\n                '</md-button>',\r\n                replace: false,\r\n                link: function ($scope, $element, $attrs: any) {\r\n                    var width, text, show,\r\n                        textGetter = $parse($attrs.pipText),\r\n                        visibleGetter = $parse($attrs.pipVisible),\r\n                        refreshGetter = $parse($attrs.pipRefresh),\r\n                        $button = $element.children('.md-button'),\r\n                        $text = $button.children('.pip-refresh-text');\r\n\r\n                    show = function () {\r\n                        // Set a new text\r\n                        text = textGetter($scope);\r\n                        $text.text(text);\r\n\r\n                        // Show button\r\n                        $button.show();\r\n\r\n                        // Adjust position\r\n                        width = $button.width();\r\n                        $button.css('margin-left', '-' + width / 2 + 'px');\r\n                    };\r\n\r\n                    function hide() {\r\n                        $button.hide();\r\n                    }\r\n\r\n                    $scope.onClick = function () {\r\n                        refreshGetter($scope);\r\n                    };\r\n\r\n                    $scope.$watch(visibleGetter, function (newValue) {\r\n                        if (newValue) {\r\n                            show();\r\n                        } else {\r\n                            hide();\r\n                        }\r\n                    });\r\n\r\n                    $scope.$watch(textGetter, function (newValue) {\r\n                        $text.text(newValue);\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    );\r\n\r\n})();\r\n\r\n","/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipToggleButtons', ['pipButtons.Templates']);\r\n\r\n    thisModule.directive('pipToggleButtons',\r\n        function () {\r\n            return {\r\n                restrict: 'EA',\r\n                scope: {\r\n                    ngDisabled: '&',\r\n                    buttons: '=pipButtons',\r\n                    currentButtonValue: '=ngModel',\r\n                    currentButton: '=?pipButtonObject',\r\n                    change: '&ngChange'\r\n                },\r\n                templateUrl: 'toggle_buttons/toggle_buttons.html',\r\n                controller: function ($scope, $element, $attrs, $mdMedia, $timeout) {\r\n                    var index;\r\n\r\n                    $scope.$mdMedia = $mdMedia;\r\n                    $scope.class = $attrs.class || '';\r\n\r\n                    if (!$scope.buttons || _.isArray($scope.buttons) && $scope.buttons.length === 0) {\r\n                        $scope.buttons = [];\r\n                    }\r\n\r\n                    index = _.indexOf($scope.buttons, _.find($scope.buttons, {id: $scope.currentButtonValue}));\r\n                    $scope.currentButtonIndex = index < 0 ? 0 : index;\r\n                    $scope.currentButton = $scope.buttons.length > 0 ? $scope.buttons[$scope.currentButtonIndex]\r\n                        : $scope.currentButton;\r\n\r\n                    $scope.buttonSelected = function (index) {\r\n                        if ($scope.disabled()) {\r\n                            return;\r\n                        }\r\n\r\n                        $scope.currentButtonIndex = index;\r\n                        $scope.currentButton = $scope.buttons[$scope.currentButtonIndex];\r\n                        $scope.currentButtonValue = $scope.currentButton.id || index;\r\n\r\n                        $timeout(function () {\r\n                            if ($scope.change) {\r\n                                $scope.change();\r\n                            }\r\n                        });\r\n                    };\r\n\r\n                    $scope.enterSpacePress = function (event) {\r\n                        $scope.buttonSelected(event.index);\r\n                    };\r\n\r\n                    $scope.disabled = function () {\r\n                        if ($scope.ngDisabled) {\r\n                            return $scope.ngDisabled();\r\n                        }\r\n                    };\r\n                },\r\n                link: function (scope, elem) {\r\n                    elem\r\n                        .on('focusin', function () {\r\n                            elem.addClass('focused-container');\r\n                        })\r\n                        .on('focusout', function () {\r\n                            elem.removeClass('focused-container');\r\n                        });\r\n                }\r\n            };\r\n        }\r\n    );\r\n\r\n})();\r\n","(function(module) {\ntry {\n  module = angular.module('pipButtons.Templates');\n} catch (e) {\n  module = angular.module('pipButtons.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('toggle_buttons/toggle_buttons.html',\n    '<div class=\"pip-toggle-buttons layout-row {{class}}\" pip-selected=\"bufButtonIndex\" pip-enter-space-press=\"enterSpacePress($event)\"\\n' +\n    '     ng-if=\"$mdMedia(\\'gt-xs\\')\">\\n' +\n    '    <md-button tabindex=\"-1\" ng-repeat=\"button in buttons\"\\n' +\n    '               ng-class=\"{\\'md-accent md-raised selected color-accent-bg\\' : currentButtonIndex == $index}\"\\n' +\n    '               ng-attr-style=\"{{ \\'background-color:\\' + (currentButtonIndex == $index ? button.backgroundColor : \\'\\') + \\'!important\\' }}\"\\n' +\n    '               class=\"pip-selectable pip-chip-button flex\" ng-click=\"buttonSelected($index, $event)\"\\n' +\n    '               ng-disabled=\"button.disabled || disabled()\">\\n' +\n    '        {{button.name || button.title | translate}}\\n' +\n    '        <span ng-if=\"button.checked || button.complete || button.filled\" class=\"pip-tagged\">*</span>\\n' +\n    '    </md-button>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<md-input-container class=\"md-block\" ng-if=\"$mdMedia(\\'xs\\')\">\\n' +\n    '    <md-select ng-model=\"currentButtonIndex\" ng-disabled=\"disabled()\" aria-label=\"DROPDOWN\" md-on-close=\"buttonSelected(currentButtonIndex)\">\\n' +\n    '        <md-option ng-repeat=\"action in buttons\" value=\"{{ ::$index }}\">\\n' +\n    '            {{ (action.title || action.name) | translate }}\\n' +\n    '            <span ng-if=\"action.checked || action.complete || action.filled\" class=\"pip-tagged\">*</span>\\n' +\n    '        </md-option>\\n' +\n    '    </md-select>\\n' +\n    '</md-input-container>\\n' +\n    '');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-buttons-html.js.map\n"]}