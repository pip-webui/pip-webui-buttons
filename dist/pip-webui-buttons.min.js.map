{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/buttons.ts","src/dependencies/translate.ts","src/fabs/fab_tooltip_visibility.ts","src/refresh_button/refresh_button.ts","src/toggle_buttons/toggle_buttons.ts","temp/pip-webui-buttons-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","buttons","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","angular","ToggleButtonsFilter","$injector","pipTranslate","has","get","key","$inject","filter","3","pipFabTooltipVisibility","$parse","$timeout","restrict","scope","controller","FabTooltipVisibilityController_1","$element","$attrs","$scope","showGetter","showSetter","assign","$watch","trigGetter","isOpen","_","isFunction","RefreshButtonBindings","text","visible","onRefresh","RefreshButtonChanges","RefreshButtonController","prototype","$postLink","_buttonElement","children","_textElement","show","$onChanges","changes","currentValue","hide","onClick","$event","undefined","width","css","RefreshButtonComponent","ToggleButtonsBindings","ToggleButton","ngDisabled","currentButtonValue","currentButton","multiselect","change","onlyToggle","ToggleButtonsChanges","ToggleButtonsController","pipMedia","class","index","indexOf","find","id","currentButtonIndex","disabled","isArray","_this","on","addClass","removeClass","buttonSelected","enterSpacePress","event","highlightButton","isUndefined","level","ToggleButtons","bindings","component","6","run","$templateCache","put"],"mappings":"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","file":"pip-webui-buttons.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","ï»¿/// <reference path=\"../typings/tsd.d.ts\" />\nangular.module('pipButtons', [\n    'pipToggleButtons',\n    'pipRefreshButton',\n    'pipFabTooltipVisibility'\n]);","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n{\n    function ToggleButtonsFilter($injector: ng.auto.IInjectorService) {\n        const pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\n\n        return function (key: string) {\n            return pipTranslate ? pipTranslate['translate'](key) || key : key;\n        }\n    }\n\n    angular.module('pipButtons.Translate', [])\n        .filter('translate', ToggleButtonsFilter);\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n{\n    class FabTooltipVisibilityController {\n        private _element;\n        private _scope: angular.IScope;\n        private _timeout: ng.ITimeoutService;\n\n        constructor(\n            $element: any,\n            $attrs: angular.IAttributes,\n            $scope: angular.IScope,\n            $timeout: ng.ITimeoutService,\n            $parse\n        ) {\n            \"ngInject\";\n            let trigGetter = $parse($attrs['pipFabTooltipVisibility']),\n                showGetter = $parse($attrs['pipFabShowTooltip']),\n                showSetter = showGetter.assign;\n\n            $scope.$watch(trigGetter, (isOpen) => {\n                if (!_.isFunction(showSetter)) return;\n\n                if (isOpen) {\n                    $timeout(() => {\n                        showSetter($scope, isOpen);\n                    }, 600);\n                } else {\n                    showSetter($scope, isOpen);\n                }\n            });\n        }\n    }\n\n\n    function pipFabTooltipVisibility($parse, $timeout): ng.IDirective {\n        return {\n            restrict: 'A',\n            scope: false,\n            controller: FabTooltipVisibilityController\n        };\n    }\n\n    angular\n        .module('pipFabTooltipVisibility', [])\n        .directive('pipFabTooltipVisibility', pipFabTooltipVisibility);\n}","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n{\n    interface IRefreshButtonBindings {\n        [key: string]: any;\n\n        text: any;\n        visible: any;\n        onRefresh: any\n    }\n\n    const RefreshButtonBindings: IRefreshButtonBindings = {\n        text: '<pipText',\n        visible: '<pipVisible',\n        onRefresh: '&?pipRefresh'\n    }\n\n    class RefreshButtonChanges implements ng.IOnChangesObject, IRefreshButtonBindings {\n        [key: string]: ng.IChangesObject < any > ;\n        // Not one way bindings\n        onRefresh: ng.IChangesObject < ({\n            $event: any\n        }) => ng.IPromise < any >> ;\n        // One way bindings\n        text: ng.IChangesObject < string > ;\n        visible: ng.IChangesObject < boolean > ;\n    }\n\n    class RefreshButtonController implements IRefreshButtonBindings {\n\n        private _textElement: any;\n        private _buttonElement: any;\n        private _width: number;\n\n        public text: string;\n        public visible: boolean;\n        public onRefresh: (param: {\n            $event: ng.IAngularEvent\n        }) => ng.IPromise < any > ;\n\n        constructor(\n            private $scope: ng.IScope,\n            private $element: any,\n            private $attrs: ng.IAttributes\n        ) {}\n\n        public $postLink() {\n            this._buttonElement = this.$element.children('.md-button');\n            this._textElement = this._buttonElement.children('.pip-refresh-text');\n\n            this.show();\n        }\n\n        public $onChanges(changes: RefreshButtonChanges) {\n            if (changes.visible.currentValue === true) {\n                this.text = changes.text.currentValue;\n                this.show();\n            } else {\n                this.hide();\n            }\n        }\n\n        public onClick($event) {\n            if (this.onRefresh) {\n                this.onRefresh({\n                    $event: $event\n                });\n            }\n        }\n\n        private show() {\n            if (this._textElement === undefined || this._buttonElement === undefined) {\n                return;\n            }\n            // Set new text\n            this._textElement.text(this.text);\n            // Show button\n            this._buttonElement.show();\n            // Adjust position\n            const width = this._buttonElement.width();\n            this._buttonElement.css('margin-left', '-' + width / 2 + 'px');\n        }\n\n        private hide() {\n            this._buttonElement.hide();\n        }\n    }\n\n\n    const RefreshButtonComponent: ng.IComponentOptions = {\n        bindings: RefreshButtonBindings,\n        controller: RefreshButtonController,\n        template: '<md-button class=\"pip-refresh-button\" tabindex=\"-1\" ng-click=\"$ctrl.onClick($event)\" aria-label=\"REFRESH\">' +\n            '<md-icon md-svg-icon=\"icons:refresh\"></md-icon>' +\n            '<span class=\"pip-refresh-text\"></span>' +\n            '</md-button>'\n    };\n\n    angular.module('pipRefreshButton', ['ngMaterial'])\n        .component('pipRefreshButton', RefreshButtonComponent);\n}","// /// <reference path=\"../../typings/tsd.d.ts\" />\n\n{\n    class ToggleButton {\n        id: any;\n        name: string;\n        disabled: boolean;\n        level: number;\n        diselectable: boolean;\n        filled: boolean;\n    }\n\n    interface IToggleButtonsBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        buttons: any;\n        currentButtonValue: any;\n        currentButton: any;\n        multiselect: any;\n        change: any;\n        onlyToggle: any\n    }\n\n    const ToggleButtonsBindings: IToggleButtonsBindings = {\n        ngDisabled: '<?',\n        buttons: '<pipButtons',\n        currentButtonValue: '=ngModel',\n        currentButton: '=?pipButtonObject',\n        multiselect: '<?pipMultiselect',\n        change: '&ngChange',\n        onlyToggle: '<?pipOnlyToggle'\n    }\n\n    class ToggleButtonsChanges implements ng.IOnChangesObject, IToggleButtonsBindings {\n        [key: string]: ng.IChangesObject < any > ;\n        // Not one way bindings\n        currentButtonValue: any;\n        currentButton: any;\n        change: ng.IChangesObject < () => ng.IPromise < void >> ;\n        // One way bindings\n        ngDisabled: ng.IChangesObject < boolean > ;\n        buttons: ng.IChangesObject < ToggleButton[] > ;\n        multiselect: ng.IChangesObject < boolean > ;\n        onlyToggle: ng.IChangesObject < boolean > ;\n    }\n\n    class ToggleButtonsController implements IToggleButtonsBindings {\n        lenght: number;\n\n        public ngDisabled: boolean;\n        public class: string;\n        public multiselect: boolean;\n        public buttons: ToggleButton[];\n        public disabled: boolean;\n        public currentButtonValue: any;\n        public currentButtonIndex: number;\n        public currentButton: any;\n        public change: () => ng.IPromise < any > ;\n        public onlyToggle: boolean;\n        public pipMedia: any;\n\n        constructor(\n            private $element: any,\n            private $attrs: angular.IAttributes,\n            private $scope: angular.IScope,\n            private $timeout: ng.ITimeoutService,\n            $injector: ng.auto.IInjectorService\n        ) {\n            \"ngInject\";\n\n            this.pipMedia = $injector.has('pipMedia') ? $injector.get('pipMedia') : null;\n            this.class = $attrs['class'] || '';\n            const index = _.indexOf(this.buttons, _.find(this.buttons, {\n                id: this.currentButtonValue\n            }));\n            this.currentButtonIndex = index < 0 ? 0 : index;\n            this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\n        }\n\n        public $onChanges(changes: ToggleButtonsChanges) {\n            this.multiselect = changes.multiselect ? changes.multiselect.currentValue : false;\n            this.disabled = changes.ngDisabled ? changes.ngDisabled.currentValue : false;\n            this.onlyToggle = changes.onlyToggle ? changes.onlyToggle.currentValue : false;\n\n            this.buttons = !changes.buttons || _.isArray(changes.buttons.currentValue) && changes.buttons.currentValue.length === 0 ? [] : changes.buttons.currentValue;\n\n            const index = _.indexOf(this.buttons, _.find(this.buttons, {\n                id: this.currentButtonValue\n            }));\n            this.currentButtonIndex = index < 0 ? 0 : index;\n            this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\n        }\n\n        public $postLink() {\n            this.$element\n                .on('focusin', () => {\n                    this.$element.addClass('focused-container');\n                })\n                .on('focusout', () => {\n                    this.$element.removeClass('focused-container');\n                });\n        }\n\n        public buttonSelected(index) {\n            if (this.disabled) {\n                return;\n            }\n\n            this.currentButtonIndex = index;\n            this.currentButton = this.buttons[this.currentButtonIndex];\n            this.currentButtonValue = this.currentButton.id || index;\n\n            this.$timeout(() => {\n                if (this.change) {\n                    this.change();\n                }\n            });\n        }\n\n        public enterSpacePress(event) {\n            this.buttonSelected(event.index);\n        }\n\n        public highlightButton(index) {\n            if (this.multiselect &&\n                !_.isUndefined(this.currentButton.level) &&\n                !_.isUndefined(this.buttons[index].level)) {\n\n                return this.currentButton.level >= this.buttons[index].level;\n            }\n\n            return this.currentButtonIndex == index;\n        }\n    }\n\n    const ToggleButtons: ng.IComponentOptions = {\n        bindings: ToggleButtonsBindings,\n        templateUrl: 'toggle_buttons/toggle_buttons.html',\n        controller: ToggleButtonsController\n    }\n\n    angular\n        .module('pipToggleButtons', ['pipButtons.Templates'])\n        .component('pipToggleButtons', ToggleButtons);\n}","(function(module) {\ntry {\n  module = angular.module('pipButtons.Templates');\n} catch (e) {\n  module = angular.module('pipButtons.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('toggle_buttons/toggle_buttons.html',\n    '<div class=\"pip-toggle-buttons layout-row {{$ctrl.class}}\" pip-selected=\"$ctrl.bufButtonIndex\" pip-enter-space-press=\"$ctrl.enterSpacePress($event)\" ng-if=\"!$ctrl.pipMedia(\\'xs\\') || $ctrl.onlyToggle\"><md-button tabindex=\"-1\" ng-repeat=\"button in $ctrl.buttons\" ng-class=\"{\\'md-accent md-raised selected color-accent-bg\\' : $ctrl.highlightButton($index)}\" ng-attr-style=\"{{ \\'background-color:\\' + ($ctrl.highlightButton($index) ? button.backgroundColor : \\'\\') + \\'!important\\' }}\" class=\"pip-selectable pip-chip-button flex\" ng-click=\"$ctrl.buttonSelected($index, $event)\" ng-disabled=\"button.disabled || $ctrl.disabled\">{{button.name || button.title | translate}} <span ng-if=\"button.checked || button.complete || button.filled\" class=\"pip-tagged\">*</span></md-button></div><md-input-container class=\"md-block\" ng-if=\"$ctrl.pipMedia(\\'xs\\') && !$ctrl.onlyToggle\"><md-select ng-model=\"$ctrl.currentButtonIndex\" ng-disabled=\"$ctrl.disabled\" aria-label=\"DROPDOWN\" md-on-close=\"$ctrl.buttonSelected($ctrl.currentButtonIndex)\"><md-option ng-repeat=\"action in $ctrl.buttons\" value=\"{{ ::$index }}\">{{ (action.title || action.name) | translate }} <span ng-if=\"action.checked || action.complete || action.filled\" class=\"pip-tagged\">*</span></md-option></md-select></md-input-container>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-buttons-html.min.js.map\n"]}