{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/dependencies/TranslateFilter.ts","src/fabs/FabTooltipVisibility.ts","src/index.ts","src/refresh_button/RefreshButton.ts","src/toggle_buttons/ToggleButtons.ts","temp/pip-webui-buttons-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","buttons","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","translate","$injector","pipTranslate","has","get","key","$inject","filter","2","pipFabTooltipVisibility","$parse","$timeout","restrict","scope","controller","FabTooltipVisibilityController_1","$element","$attrs","$scope","showGetter","showSetter","assign","$watch","trigGetter","isOpen","_","isFunction","angular","3","Object","defineProperty","value","./refresh_button/RefreshButton","./toggle_buttons/ToggleButtons","4","RefreshButtonBindings","text","visible","onRefresh","RefreshButtonChanges","RefreshButtonController","prototype","$postLink","_buttonElement","children","_textElement","show","hide","$onChanges","changes","currentValue","onClick","$event","undefined","width","css","template","component","RefreshButtonComponent","ToggleButtonsBindings","ToggleButton","ngDisabled","currentButtonValue","currentButton","multiselect","change","onlyToggle","ToggleButtonsChanges","ToggleButtonsController","pipMedia","class","index","indexOf","find","id","currentButtonIndex","disabled","isArray","on","_this","addClass","removeClass","buttonSelected","enterSpacePress","event","highlightButton","isUndefined","level","ToggleButtons","6","run","$templateCache","put"],"mappings":"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","file":"pip-webui-buttons.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","{\r\n    function translate($injector: ng.auto.IInjectorService) {\r\n        const pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\r\n\r\n        return function (key: string) {\r\n            return pipTranslate ? pipTranslate['translate'](key) || key : key;\r\n        }\r\n    }\r\n\r\n    angular.module('pipButtons.Translate', [])\r\n        .filter('translate', translate);\r\n}","{\r\n\r\nclass FabTooltipVisibilityController {\r\n    private _element;\r\n    private _scope: angular.IScope;\r\n    private _timeout: ng.ITimeoutService;\r\n\r\n    constructor(\r\n        $element: any,\r\n        $attrs: angular.IAttributes,\r\n        $scope: angular.IScope,\r\n        $timeout: ng.ITimeoutService,\r\n        $parse\r\n    ) {\r\n        \"ngInject\";\r\n        let trigGetter = $parse($attrs['pipFabTooltipVisibility']),\r\n            showGetter = $parse($attrs['pipFabShowTooltip']),\r\n            showSetter = showGetter.assign;\r\n\r\n        $scope.$watch(trigGetter, (isOpen) => {\r\n            if (!_.isFunction(showSetter)) return;\r\n\r\n            if (isOpen) {\r\n                $timeout(() => {\r\n                    showSetter($scope, isOpen);\r\n                }, 600);\r\n            } else {\r\n                showSetter($scope, isOpen);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction pipFabTooltipVisibility($parse, $timeout): ng.IDirective {\r\n    return {\r\n        restrict: 'A',\r\n        scope: false,\r\n        controller: FabTooltipVisibilityController\r\n    };\r\n}\r\n\r\nangular\r\n    .module('pipFabTooltipVisibility', [])\r\n    .directive('pipFabTooltipVisibility', pipFabTooltipVisibility);\r\n\r\n}","ï»¿import './refresh_button/RefreshButton';\r\nimport './toggle_buttons/ToggleButtons'\r\nimport './fabs/FabTooltipVisibility';\r\n\r\nangular.module('pipButtons', [\r\n    'pipToggleButtons',\r\n    'pipRefreshButton',\r\n    'pipFabTooltipVisibility'\r\n]);","{\r\n\r\n    interface IRefreshButtonBindings {\r\n        [key: string]: any;\r\n\r\n        text: any;\r\n        visible: any;\r\n        onRefresh: any\r\n    }\r\n\r\n    const RefreshButtonBindings: IRefreshButtonBindings = {\r\n        text: '<pipText',\r\n        visible: '<pipVisible',\r\n        onRefresh: '&?pipRefresh'\r\n    }\r\n\r\n    class RefreshButtonChanges implements ng.IOnChangesObject, IRefreshButtonBindings {\r\n        [key: string]: ng.IChangesObject<any>;\r\n        // Not one way bindings\r\n        onRefresh: ng.IChangesObject<({\r\n            $event: any\r\n        }) => ng.IPromise<any>>;\r\n        // One way bindings\r\n        text: ng.IChangesObject<string>;\r\n        visible: ng.IChangesObject<boolean>;\r\n    }\r\n\r\n    class RefreshButtonController implements IRefreshButtonBindings {\r\n\r\n        private _textElement: any;\r\n        private _buttonElement: any;\r\n        private _width: number;\r\n\r\n        public text: string;\r\n        public visible: boolean;\r\n        public onRefresh: (param: {\r\n            $event: ng.IAngularEvent\r\n        }) => ng.IPromise<any>;\r\n\r\n        constructor(\r\n            private $scope: ng.IScope,\r\n            private $element: any,\r\n            private $attrs: ng.IAttributes\r\n        ) { \"ngInject\"; }\r\n\r\n        public $postLink() {\r\n            this._buttonElement = this.$element.children('.md-button');\r\n            this._textElement = this._buttonElement.children('.pip-refresh-text');\r\n\r\n            if (this.visible) {\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n        }\r\n\r\n        public $onChanges(changes: RefreshButtonChanges) {\r\n            if (changes.visible.currentValue === true) {\r\n                this.text = changes.text.currentValue;\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n        }\r\n\r\n        public onClick($event) {\r\n            if (this.onRefresh) {\r\n                this.onRefresh({\r\n                    $event: $event\r\n                });\r\n            }\r\n        }\r\n\r\n        private show() {\r\n            if (this._textElement === undefined || this._buttonElement === undefined) {\r\n                return;\r\n            }\r\n            // Set new text\r\n            this._textElement.text(this.text);\r\n            // Show button\r\n            this._buttonElement.show();\r\n            // Adjust position\r\n            const width = this._buttonElement.width();\r\n            this._buttonElement.css('margin-left', '-' + width / 2 + 'px');\r\n        }\r\n\r\n        private hide() {\r\n            if (this._textElement === undefined || this._buttonElement === undefined) {\r\n                return;\r\n            }\r\n            this._buttonElement.hide();\r\n        }\r\n    }\r\n\r\n\r\n    const RefreshButtonComponent: ng.IComponentOptions = {\r\n        bindings: RefreshButtonBindings,\r\n        controller: RefreshButtonController,\r\n        template: '<md-button class=\"pip-refresh-button\" tabindex=\"-1\" ng-click=\"$ctrl.onClick($event)\" aria-label=\"REFRESH\">' +\r\n            '<md-icon md-svg-icon=\"icons:refresh\"></md-icon>' +\r\n            '<span class=\"pip-refresh-text\"></span>' +\r\n            '</md-button>'\r\n    };\r\n\r\n    angular\r\n        .module('pipRefreshButton', ['ngMaterial'])\r\n        .component('pipRefreshButton', RefreshButtonComponent);\r\n\r\n}","{\r\n\r\nclass ToggleButton {\r\n    id: any;\r\n    name: string;\r\n    disabled: boolean;\r\n    level: number;\r\n    diselectable: boolean;\r\n    filled: boolean;\r\n}\r\n\r\ninterface IToggleButtonsBindings {\r\n    [key: string]: any;\r\n\r\n    ngDisabled: any;\r\n    buttons: any;\r\n    currentButtonValue: any;\r\n    currentButton: any;\r\n    multiselect: any;\r\n    change: any;\r\n    onlyToggle: any\r\n}\r\n\r\nconst ToggleButtonsBindings: IToggleButtonsBindings = {\r\n    ngDisabled: '<?',\r\n    buttons: '<pipButtons',\r\n    currentButtonValue: '=ngModel',\r\n    currentButton: '=?pipButtonObject',\r\n    multiselect: '<?pipMultiselect',\r\n    change: '&ngChange',\r\n    onlyToggle: '<?pipOnlyToggle'\r\n}\r\n\r\nclass ToggleButtonsChanges implements ng.IOnChangesObject, IToggleButtonsBindings {\r\n    [key: string]: ng.IChangesObject < any > ;\r\n    // Not one way bindings\r\n    currentButtonValue: any;\r\n    currentButton: any;\r\n    change: ng.IChangesObject < () => ng.IPromise < void >> ;\r\n    // One way bindings\r\n    ngDisabled: ng.IChangesObject < boolean > ;\r\n    buttons: ng.IChangesObject < ToggleButton[] > ;\r\n    multiselect: ng.IChangesObject < boolean > ;\r\n    onlyToggle: ng.IChangesObject < boolean > ;\r\n}\r\n\r\nclass ToggleButtonsController implements IToggleButtonsBindings {\r\n    lenght: number;\r\n\r\n    public ngDisabled: boolean;\r\n    public class: string;\r\n    public multiselect: boolean;\r\n    public buttons: ToggleButton[] = [];\r\n    public disabled: boolean;\r\n    public currentButtonValue: any;\r\n    public currentButtonIndex: number;\r\n    public currentButton: any;\r\n    public change: () => ng.IPromise < any > ;\r\n    public onlyToggle: boolean;\r\n    public pipMedia: any;\r\n\r\n    constructor(\r\n        private $element: any,\r\n        private $attrs: angular.IAttributes,\r\n        private $scope: angular.IScope,\r\n        private $timeout: ng.ITimeoutService,\r\n        $injector: ng.auto.IInjectorService\r\n    ) {\r\n        \"ngInject\";\r\n\r\n        this.pipMedia = $injector.has('pipMedia') ? $injector.get('pipMedia') : null;\r\n        this.class = $attrs['class'] || '';\r\n        const index = _.indexOf(this.buttons, _.find(this.buttons, {\r\n            id: this.currentButtonValue\r\n        }));\r\n        this.currentButtonIndex = index < 0 ? 0 : index;\r\n        this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\r\n    }\r\n\r\n    public $onChanges(changes: ToggleButtonsChanges) {\r\n        this.multiselect = changes.multiselect ? changes.multiselect.currentValue : this.multiselect;\r\n        this.disabled = changes.ngDisabled ? changes.ngDisabled.currentValue : this.disabled;\r\n        this.onlyToggle = changes.onlyToggle ? changes.onlyToggle.currentValue : this.onlyToggle;\r\n\r\n        if (changes.buttons) {\r\n            this.buttons = _.isArray(changes.buttons.currentValue) && changes.buttons.currentValue.length === 0 ? [] : changes.buttons.currentValue;\r\n        }\r\n\r\n        const index = _.indexOf(this.buttons, _.find(this.buttons, {\r\n            id: this.currentButtonValue\r\n        }));\r\n        this.currentButtonIndex = index < 0 ? 0 : index;\r\n        this.currentButton = this.buttons.length > 0 ? this.buttons[this.currentButtonIndex] : this.currentButton;\r\n    }\r\n\r\n    public $postLink() {\r\n        this.$element\r\n            .on('focusin', () => {\r\n                this.$element.addClass('focused-container');\r\n            })\r\n            .on('focusout', () => {\r\n                this.$element.removeClass('focused-container');\r\n            });\r\n    }\r\n\r\n    public buttonSelected(index) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.currentButtonIndex = index;\r\n        this.currentButton = this.buttons[this.currentButtonIndex];\r\n        this.currentButtonValue = this.currentButton.id || index;\r\n\r\n        this.$timeout(() => {\r\n            if (this.change) {\r\n                this.change();\r\n            }\r\n        });\r\n    }\r\n\r\n    public enterSpacePress(event) {\r\n        this.buttonSelected(event.index);\r\n    }\r\n\r\n    public highlightButton(index) {\r\n        if (this.multiselect &&\r\n            !_.isUndefined(this.currentButton.level) &&\r\n            !_.isUndefined(this.buttons[index].level)) {\r\n\r\n            return this.currentButton.level >= this.buttons[index].level;\r\n        }\r\n\r\n        return this.currentButtonIndex == index;\r\n    }\r\n}\r\n\r\nconst ToggleButtons: ng.IComponentOptions = {\r\n    bindings: ToggleButtonsBindings,\r\n    templateUrl: 'toggle_buttons/ToggleButtons.html',\r\n    controller: ToggleButtonsController\r\n}\r\n\r\nangular\r\n    .module('pipToggleButtons', ['pipButtons.Templates'])\r\n    .component('pipToggleButtons', ToggleButtons);\r\n\r\n}","(function(module) {\ntry {\n  module = angular.module('pipButtons.Templates');\n} catch (e) {\n  module = angular.module('pipButtons.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('toggle_buttons/ToggleButtons.html',\n    '<div class=\"pip-toggle-buttons layout-row {{$ctrl.class}}\" pip-selected=\"$ctrl.bufButtonIndex\" pip-enter-space-press=\"$ctrl.enterSpacePress($event)\" ng-if=\"!$ctrl.pipMedia(\\'xs\\') || $ctrl.onlyToggle\"><md-button tabindex=\"-1\" ng-repeat=\"button in $ctrl.buttons\" ng-class=\"{\\'md-accent md-raised selected color-accent-bg\\' : $ctrl.highlightButton($index)}\" ng-attr-style=\"{{ \\'background-color:\\' + ($ctrl.highlightButton($index) ? button.backgroundColor : \\'\\') + \\'!important\\' }}\" class=\"pip-selectable pip-chip-button flex\" ng-click=\"$ctrl.buttonSelected($index, $event)\" ng-disabled=\"button.disabled || $ctrl.disabled\">{{button.name || button.title | translate}} <span ng-if=\"button.checked || button.complete || button.filled\" class=\"pip-tagged\">*</span></md-button></div><md-input-container class=\"md-block\" ng-if=\"$ctrl.pipMedia(\\'xs\\') && !$ctrl.onlyToggle\"><md-select ng-model=\"$ctrl.currentButtonIndex\" ng-disabled=\"$ctrl.disabled\" aria-label=\"DROPDOWN\" md-on-close=\"$ctrl.buttonSelected($ctrl.currentButtonIndex)\"><md-option ng-repeat=\"action in $ctrl.buttons\" value=\"{{ ::$index }}\">{{ (action.title || action.name) | translate }} <span ng-if=\"action.checked || action.complete || action.filled\" class=\"pip-tagged\">*</span></md-option></md-select></md-input-container>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-buttons-html.min.js.map\n"]}